
nir_vma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003608  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080036c8  080036c8  000136c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003700  08003700  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003700  08003700  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003700  08003700  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003700  08003700  00013700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003704  08003704  00013704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000010  08003718  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003718  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d44d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce7  00000000  00000000  0002d485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002f170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  0002fd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001041e  00000000  00000000  00030868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df19  00000000  00000000  00040c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000642b3  00000000  00000000  0004eb9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b2e52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a50  00000000  00000000  000b2ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080036b0 	.word	0x080036b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080036b0 	.word	0x080036b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Thruster_Init>:
extern TIM_HandleTypeDef htim3;



void Thruster_Init()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <Thruster_Init+0x4c>)
 8000226:	2100      	movs	r1, #0
 8000228:	0018      	movs	r0, r3
 800022a:	f001 fd51 	bl	8001cd0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 800022e:	4b0f      	ldr	r3, [pc, #60]	; (800026c <Thruster_Init+0x4c>)
 8000230:	2104      	movs	r1, #4
 8000232:	0018      	movs	r0, r3
 8000234:	f001 fd4c 	bl	8001cd0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <Thruster_Init+0x4c>)
 800023a:	2108      	movs	r1, #8
 800023c:	0018      	movs	r0, r3
 800023e:	f001 fd47 	bl	8001cd0 <HAL_TIM_PWM_Start_IT>


	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000242:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <Thruster_Init+0x50>)
 8000244:	2100      	movs	r1, #0
 8000246:	0018      	movs	r0, r3
 8000248:	f001 fd42 	bl	8001cd0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <Thruster_Init+0x50>)
 800024e:	2104      	movs	r1, #4
 8000250:	0018      	movs	r0, r3
 8000252:	f001 fd3d 	bl	8001cd0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <Thruster_Init+0x50>)
 8000258:	2108      	movs	r1, #8
 800025a:	0018      	movs	r0, r3
 800025c:	f001 fd38 	bl	8001cd0 <HAL_TIM_PWM_Start_IT>


	Thruster_Stop();
 8000260:	f000 f808 	bl	8000274 <Thruster_Stop>

}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	2000002c 	.word	0x2000002c
 8000270:	20000074 	.word	0x20000074

08000274 <Thruster_Stop>:

void Thruster_Stop()
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
	int speed = 200;
 800027a:	23c8      	movs	r3, #200	; 0xc8
 800027c:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 800027e:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <Thruster_Stop+0x4c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <Thruster_Stop+0x4c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
 800028e:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <Thruster_Stop+0x4c>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	63da      	str	r2, [r3, #60]	; 0x3c

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <Thruster_Stop+0x50>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <Thruster_Stop+0x50>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, speed);
 80002a6:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <Thruster_Stop+0x50>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_Delay(4000);
 80002ae:	23fa      	movs	r3, #250	; 0xfa
 80002b0:	011b      	lsls	r3, r3, #4
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fd6e 	bl	8000d94 <HAL_Delay>
}
 80002b8:	46c0      	nop			; (mov r8, r8)
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b002      	add	sp, #8
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	2000002c 	.word	0x2000002c
 80002c4:	20000074 	.word	0x20000074

080002c8 <Thruster_Set_Speed>:

void Thruster_Set_Speed(uint16_t* speed)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed[2]);//3
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3304      	adds	r3, #4
 80002d4:	881a      	ldrh	r2, [r3, #0]
 80002d6:	4b12      	ldr	r3, [pc, #72]	; (8000320 <Thruster_Set_Speed+0x58>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed[1]);//1
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	3302      	adds	r3, #2
 80002e0:	881a      	ldrh	r2, [r3, #0]
 80002e2:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <Thruster_Set_Speed+0x58>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed[0]);//7
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	881a      	ldrh	r2, [r3, #0]
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <Thruster_Set_Speed+0x58>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	63da      	str	r2, [r3, #60]	; 0x3c


	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed[5]);//2
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	330a      	adds	r3, #10
 80002f6:	881a      	ldrh	r2, [r3, #0]
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <Thruster_Set_Speed+0x5c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed[4]);//4
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3308      	adds	r3, #8
 8000302:	881a      	ldrh	r2, [r3, #0]
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <Thruster_Set_Speed+0x5c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, speed[3]);//5
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3306      	adds	r3, #6
 800030e:	881a      	ldrh	r2, [r3, #0]
 8000310:	4b04      	ldr	r3, [pc, #16]	; (8000324 <Thruster_Set_Speed+0x5c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	b002      	add	sp, #8
 800031c:	bd80      	pop	{r7, pc}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	2000002c 	.word	0x2000002c
 8000324:	20000074 	.word	0x20000074

08000328 <calculate_crc>:
#include "crc.h"

uint16_t calculate_crc(unsigned char *data_ptr, unsigned short size)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	000a      	movs	r2, r1
 8000332:	1cbb      	adds	r3, r7, #2
 8000334:	801a      	strh	r2, [r3, #0]
    uint16_t wcrc=0xFFFF;// preset 16 position crc register , The initial values are all 1
 8000336:	2316      	movs	r3, #22
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	2201      	movs	r2, #1
 800033c:	4252      	negs	r2, r2
 800033e:	801a      	strh	r2, [r3, #0]
    uint8_t temp;// Define intermediate variables
    int i=0,j=0;// Define count
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
    for(i=0;i<size;i++)// Cycle through each data
 8000348:	2300      	movs	r3, #0
 800034a:	613b      	str	r3, [r7, #16]
 800034c:	e033      	b.n	80003b6 <calculate_crc+0x8e>
    {

       temp=data_ptr[i];
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	18d2      	adds	r2, r2, r3
 8000354:	210b      	movs	r1, #11
 8000356:	187b      	adds	r3, r7, r1
 8000358:	7812      	ldrb	r2, [r2, #0]
 800035a:	701a      	strb	r2, [r3, #0]
       wcrc^=temp;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	b299      	uxth	r1, r3
 8000362:	2216      	movs	r2, #22
 8000364:	18bb      	adds	r3, r7, r2
 8000366:	18ba      	adds	r2, r7, r2
 8000368:	8812      	ldrh	r2, [r2, #0]
 800036a:	404a      	eors	r2, r1
 800036c:	801a      	strh	r2, [r3, #0]
       for(j=0;j<8;j++){
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
 8000372:	e01a      	b.n	80003aa <calculate_crc+0x82>

          // Judge whether what is moved to the right is 1, If it is 1 XOR with polynomials .
          if(wcrc&0x0001){
 8000374:	2116      	movs	r1, #22
 8000376:	187b      	adds	r3, r7, r1
 8000378:	881b      	ldrh	r3, [r3, #0]
 800037a:	2201      	movs	r2, #1
 800037c:	4013      	ands	r3, r2
 800037e:	d00b      	beq.n	8000398 <calculate_crc+0x70>

              wcrc>>=1;// First move the data one bit to the right
 8000380:	187b      	adds	r3, r7, r1
 8000382:	187a      	adds	r2, r7, r1
 8000384:	8812      	ldrh	r2, [r2, #0]
 8000386:	0852      	lsrs	r2, r2, #1
 8000388:	801a      	strh	r2, [r3, #0]
              wcrc^=0xA001;// XOR with the polynomial above
 800038a:	187b      	adds	r3, r7, r1
 800038c:	187a      	adds	r2, r7, r1
 800038e:	8812      	ldrh	r2, [r2, #0]
 8000390:	4911      	ldr	r1, [pc, #68]	; (80003d8 <calculate_crc+0xb0>)
 8000392:	404a      	eors	r2, r1
 8000394:	801a      	strh	r2, [r3, #0]
 8000396:	e005      	b.n	80003a4 <calculate_crc+0x7c>
          }
          else// If not 1, Then directly remove
              wcrc>>=1;// Direct removal
 8000398:	2216      	movs	r2, #22
 800039a:	18bb      	adds	r3, r7, r2
 800039c:	18ba      	adds	r2, r7, r2
 800039e:	8812      	ldrh	r2, [r2, #0]
 80003a0:	0852      	lsrs	r2, r2, #1
 80003a2:	801a      	strh	r2, [r3, #0]
       for(j=0;j<8;j++){
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	3301      	adds	r3, #1
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	2b07      	cmp	r3, #7
 80003ae:	dde1      	ble.n	8000374 <calculate_crc+0x4c>
    for(i=0;i<size;i++)// Cycle through each data
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	3301      	adds	r3, #1
 80003b4:	613b      	str	r3, [r7, #16]
 80003b6:	1cbb      	adds	r3, r7, #2
 80003b8:	881b      	ldrh	r3, [r3, #0]
 80003ba:	693a      	ldr	r2, [r7, #16]
 80003bc:	429a      	cmp	r2, r3
 80003be:	dbc6      	blt.n	800034e <calculate_crc+0x26>
       }
    }
    temp=wcrc;//crc Value
 80003c0:	230b      	movs	r3, #11
 80003c2:	18fb      	adds	r3, r7, r3
 80003c4:	2116      	movs	r1, #22
 80003c6:	187a      	adds	r2, r7, r1
 80003c8:	8812      	ldrh	r2, [r2, #0]
 80003ca:	701a      	strb	r2, [r3, #0]
    return wcrc;
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	881b      	ldrh	r3, [r3, #0]
}
 80003d0:	0018      	movs	r0, r3
 80003d2:	46bd      	mov	sp, r7
 80003d4:	b006      	add	sp, #24
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	ffffa001 	.word	0xffffa001

080003dc <check_crc>:

uint8_t check_crc(unsigned char *data_ptr, unsigned short size){
 80003dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	000a      	movs	r2, r1
 80003e6:	1cbb      	adds	r3, r7, #2
 80003e8:	801a      	strh	r2, [r3, #0]
    unsigned char crc_low = 0;
 80003ea:	260f      	movs	r6, #15
 80003ec:	19bb      	adds	r3, r7, r6
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
    unsigned char crc_high = 0;
 80003f2:	200e      	movs	r0, #14
 80003f4:	183b      	adds	r3, r7, r0
 80003f6:	2200      	movs	r2, #0
 80003f8:	701a      	strb	r2, [r3, #0]
	uint16_t crc16bit = 0;
 80003fa:	250c      	movs	r5, #12
 80003fc:	197b      	adds	r3, r7, r5
 80003fe:	2200      	movs	r2, #0
 8000400:	801a      	strh	r2, [r3, #0]
	crc16bit = calculate_crc(data_ptr,size-2);
 8000402:	1cbb      	adds	r3, r7, #2
 8000404:	881b      	ldrh	r3, [r3, #0]
 8000406:	3b02      	subs	r3, #2
 8000408:	b29a      	uxth	r2, r3
 800040a:	197c      	adds	r4, r7, r5
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	0011      	movs	r1, r2
 8000410:	0018      	movs	r0, r3
 8000412:	f7ff ff89 	bl	8000328 <calculate_crc>
 8000416:	0003      	movs	r3, r0
 8000418:	8023      	strh	r3, [r4, #0]
	crc_low = (crc16bit & 0x00FF);
 800041a:	0031      	movs	r1, r6
 800041c:	187b      	adds	r3, r7, r1
 800041e:	197a      	adds	r2, r7, r5
 8000420:	8812      	ldrh	r2, [r2, #0]
 8000422:	701a      	strb	r2, [r3, #0]
	crc_high = (crc16bit>>8) & 0x00FF;
 8000424:	197b      	adds	r3, r7, r5
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	0a1b      	lsrs	r3, r3, #8
 800042a:	b29a      	uxth	r2, r3
 800042c:	200e      	movs	r0, #14
 800042e:	183b      	adds	r3, r7, r0
 8000430:	701a      	strb	r2, [r3, #0]
	unsigned char tmp1= data_ptr[size-1];
 8000432:	1cbb      	adds	r3, r7, #2
 8000434:	881b      	ldrh	r3, [r3, #0]
 8000436:	3b01      	subs	r3, #1
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	18d2      	adds	r2, r2, r3
 800043c:	230b      	movs	r3, #11
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	7812      	ldrb	r2, [r2, #0]
 8000442:	701a      	strb	r2, [r3, #0]
	unsigned char tmp2= data_ptr[size-2];
 8000444:	1cbb      	adds	r3, r7, #2
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	3b02      	subs	r3, #2
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	18d2      	adds	r2, r2, r3
 800044e:	230a      	movs	r3, #10
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	7812      	ldrb	r2, [r2, #0]
 8000454:	701a      	strb	r2, [r3, #0]
	if(data_ptr[size-1]==crc_high && data_ptr[size-2]==crc_low){
 8000456:	1cbb      	adds	r3, r7, #2
 8000458:	881b      	ldrh	r3, [r3, #0]
 800045a:	3b01      	subs	r3, #1
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	18d3      	adds	r3, r2, r3
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	183a      	adds	r2, r7, r0
 8000464:	7812      	ldrb	r2, [r2, #0]
 8000466:	429a      	cmp	r2, r3
 8000468:	d10b      	bne.n	8000482 <check_crc+0xa6>
 800046a:	1cbb      	adds	r3, r7, #2
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	3b02      	subs	r3, #2
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	18d3      	adds	r3, r2, r3
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	187a      	adds	r2, r7, r1
 8000478:	7812      	ldrb	r2, [r2, #0]
 800047a:	429a      	cmp	r2, r3
 800047c:	d101      	bne.n	8000482 <check_crc+0xa6>
		return 1;
 800047e:	2301      	movs	r3, #1
 8000480:	e000      	b.n	8000484 <check_crc+0xa8>
	}
	else
		return 0;
 8000482:	2300      	movs	r3, #0

}
 8000484:	0018      	movs	r0, r3
 8000486:	46bd      	mov	sp, r7
 8000488:	b005      	add	sp, #20
 800048a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000490:	f000 fc1c 	bl	8000ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000494:	f000 f8ac 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000498:	f000 fa4c 	bl	8000934 <MX_GPIO_Init>
  MX_TIM1_Init();
 800049c:	f000 f8f0 	bl	8000680 <MX_TIM1_Init>
  MX_TIM3_Init();
 80004a0:	f000 f99e 	bl	80007e0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80004a4:	f000 fa16 	bl	80008d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Thruster_Init();
 80004a8:	f7ff feba 	bl	8000220 <Thruster_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart2, (uint8_t*)bufferRx, 18, 10); //принимаем сообщение
 80004ac:	494a      	ldr	r1, [pc, #296]	; (80005d8 <main+0x14c>)
 80004ae:	484b      	ldr	r0, [pc, #300]	; (80005dc <main+0x150>)
 80004b0:	230a      	movs	r3, #10
 80004b2:	2212      	movs	r2, #18
 80004b4:	f002 f96c 	bl	8002790 <HAL_UART_Receive>
      if((bufferRx[0] == 0xff) && (bufferRx[1] == 0xfD))
 80004b8:	4b47      	ldr	r3, [pc, #284]	; (80005d8 <main+0x14c>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2bff      	cmp	r3, #255	; 0xff
 80004be:	d10d      	bne.n	80004dc <main+0x50>
 80004c0:	4b45      	ldr	r3, [pc, #276]	; (80005d8 <main+0x14c>)
 80004c2:	785b      	ldrb	r3, [r3, #1]
 80004c4:	2bfd      	cmp	r3, #253	; 0xfd
 80004c6:	d109      	bne.n	80004dc <main+0x50>
     	  rxFlag = 1;
 80004c8:	4b45      	ldr	r3, [pc, #276]	; (80005e0 <main+0x154>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
      while(bufferRx[0]!= 0xff || bufferRx[1]!= 0xfD){ //проверяем соответсвует ли посылка
 80004ce:	e005      	b.n	80004dc <main+0x50>
      			HAL_UART_Receive(&huart2, (uint8_t*)bufferRx, 18, 10);//принимаем сообщение еще раз
 80004d0:	4941      	ldr	r1, [pc, #260]	; (80005d8 <main+0x14c>)
 80004d2:	4842      	ldr	r0, [pc, #264]	; (80005dc <main+0x150>)
 80004d4:	230a      	movs	r3, #10
 80004d6:	2212      	movs	r2, #18
 80004d8:	f002 f95a 	bl	8002790 <HAL_UART_Receive>
      while(bufferRx[0]!= 0xff || bufferRx[1]!= 0xfD){ //проверяем соответсвует ли посылка
 80004dc:	4b3e      	ldr	r3, [pc, #248]	; (80005d8 <main+0x14c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d1f5      	bne.n	80004d0 <main+0x44>
 80004e4:	4b3c      	ldr	r3, [pc, #240]	; (80005d8 <main+0x14c>)
 80004e6:	785b      	ldrb	r3, [r3, #1]
 80004e8:	2bfd      	cmp	r3, #253	; 0xfd
 80004ea:	d1f1      	bne.n	80004d0 <main+0x44>
      		}

	//  if (huart2.RxXferCount == 0){
	  if(rxFlag){
 80004ec:	4b3c      	ldr	r3, [pc, #240]	; (80005e0 <main+0x154>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d0db      	beq.n	80004ac <main+0x20>

		  rxFlag = 0;
 80004f4:	4b3a      	ldr	r3, [pc, #232]	; (80005e0 <main+0x154>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
		  if(check_crc(bufferRx, MAX_SIZE)){ //если crc совпало
 80004fa:	4b3a      	ldr	r3, [pc, #232]	; (80005e4 <main+0x158>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	001a      	movs	r2, r3
 8000500:	4b35      	ldr	r3, [pc, #212]	; (80005d8 <main+0x14c>)
 8000502:	0011      	movs	r1, r2
 8000504:	0018      	movs	r0, r3
 8000506:	f7ff ff69 	bl	80003dc <check_crc>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d0ce      	beq.n	80004ac <main+0x20>

			  data[0] =  (bufferRx[3] << 8) | (bufferRx[2] & 0xff);
 800050e:	4b32      	ldr	r3, [pc, #200]	; (80005d8 <main+0x14c>)
 8000510:	78db      	ldrb	r3, [r3, #3]
 8000512:	021b      	lsls	r3, r3, #8
 8000514:	b21a      	sxth	r2, r3
 8000516:	4b30      	ldr	r3, [pc, #192]	; (80005d8 <main+0x14c>)
 8000518:	789b      	ldrb	r3, [r3, #2]
 800051a:	b21b      	sxth	r3, r3
 800051c:	4313      	orrs	r3, r2
 800051e:	b21b      	sxth	r3, r3
 8000520:	b29a      	uxth	r2, r3
 8000522:	4b31      	ldr	r3, [pc, #196]	; (80005e8 <main+0x15c>)
 8000524:	801a      	strh	r2, [r3, #0]
			  data[1] =  (bufferRx[5] << 8) | (bufferRx[4] & 0xff);
 8000526:	4b2c      	ldr	r3, [pc, #176]	; (80005d8 <main+0x14c>)
 8000528:	795b      	ldrb	r3, [r3, #5]
 800052a:	021b      	lsls	r3, r3, #8
 800052c:	b21a      	sxth	r2, r3
 800052e:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <main+0x14c>)
 8000530:	791b      	ldrb	r3, [r3, #4]
 8000532:	b21b      	sxth	r3, r3
 8000534:	4313      	orrs	r3, r2
 8000536:	b21b      	sxth	r3, r3
 8000538:	b29a      	uxth	r2, r3
 800053a:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <main+0x15c>)
 800053c:	805a      	strh	r2, [r3, #2]
			  data[2] =  (bufferRx[7] << 8) | (bufferRx[6] & 0xff);
 800053e:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <main+0x14c>)
 8000540:	79db      	ldrb	r3, [r3, #7]
 8000542:	021b      	lsls	r3, r3, #8
 8000544:	b21a      	sxth	r2, r3
 8000546:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <main+0x14c>)
 8000548:	799b      	ldrb	r3, [r3, #6]
 800054a:	b21b      	sxth	r3, r3
 800054c:	4313      	orrs	r3, r2
 800054e:	b21b      	sxth	r3, r3
 8000550:	b29a      	uxth	r2, r3
 8000552:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <main+0x15c>)
 8000554:	809a      	strh	r2, [r3, #4]
			  data[3] =  (bufferRx[9] << 8) | (bufferRx[8] & 0xff);
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <main+0x14c>)
 8000558:	7a5b      	ldrb	r3, [r3, #9]
 800055a:	021b      	lsls	r3, r3, #8
 800055c:	b21a      	sxth	r2, r3
 800055e:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <main+0x14c>)
 8000560:	7a1b      	ldrb	r3, [r3, #8]
 8000562:	b21b      	sxth	r3, r3
 8000564:	4313      	orrs	r3, r2
 8000566:	b21b      	sxth	r3, r3
 8000568:	b29a      	uxth	r2, r3
 800056a:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <main+0x15c>)
 800056c:	80da      	strh	r2, [r3, #6]
			  data[4] =  (bufferRx[11] << 8) | (bufferRx[10] & 0xff);
 800056e:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <main+0x14c>)
 8000570:	7adb      	ldrb	r3, [r3, #11]
 8000572:	021b      	lsls	r3, r3, #8
 8000574:	b21a      	sxth	r2, r3
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <main+0x14c>)
 8000578:	7a9b      	ldrb	r3, [r3, #10]
 800057a:	b21b      	sxth	r3, r3
 800057c:	4313      	orrs	r3, r2
 800057e:	b21b      	sxth	r3, r3
 8000580:	b29a      	uxth	r2, r3
 8000582:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <main+0x15c>)
 8000584:	811a      	strh	r2, [r3, #8]
			  data[5] =  (bufferRx[13] << 8) | (bufferRx[12] & 0xff);
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <main+0x14c>)
 8000588:	7b5b      	ldrb	r3, [r3, #13]
 800058a:	021b      	lsls	r3, r3, #8
 800058c:	b21a      	sxth	r2, r3
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <main+0x14c>)
 8000590:	7b1b      	ldrb	r3, [r3, #12]
 8000592:	b21b      	sxth	r3, r3
 8000594:	4313      	orrs	r3, r2
 8000596:	b21b      	sxth	r3, r3
 8000598:	b29a      	uxth	r2, r3
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <main+0x15c>)
 800059c:	815a      	strh	r2, [r3, #10]
			  flags = (bufferRx[15] << 8) | (bufferRx[14] & 0xff);
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <main+0x14c>)
 80005a0:	7bdb      	ldrb	r3, [r3, #15]
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	b21a      	sxth	r2, r3
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <main+0x14c>)
 80005a8:	7b9b      	ldrb	r3, [r3, #14]
 80005aa:	b21b      	sxth	r3, r3
 80005ac:	4313      	orrs	r3, r2
 80005ae:	b21b      	sxth	r3, r3
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <main+0x160>)
 80005b4:	801a      	strh	r2, [r3, #0]

			  Thruster_Set_Speed(data); //записываем ширину импульса Ш�?Ма
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <main+0x15c>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f7ff fe85 	bl	80002c8 <Thruster_Set_Speed>


			  if(flags & (1 << 7)){  //если 7 бит выставлен
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <main+0x160>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	001a      	movs	r2, r3
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	4013      	ands	r3, r2
 80005c8:	d100      	bne.n	80005cc <main+0x140>
 80005ca:	e76f      	b.n	80004ac <main+0x20>
				HAL_Delay(500);
 80005cc:	23fa      	movs	r3, #250	; 0xfa
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 fbdf 	bl	8000d94 <HAL_Delay>
	  HAL_UART_Receive(&huart2, (uint8_t*)bufferRx, 18, 10); //принимаем сообщение
 80005d6:	e769      	b.n	80004ac <main+0x20>
 80005d8:	20000144 	.word	0x20000144
 80005dc:	200000bc 	.word	0x200000bc
 80005e0:	20000156 	.word	0x20000156
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000158 	.word	0x20000158
 80005ec:	20000164 	.word	0x20000164

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b091      	sub	sp, #68	; 0x44
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	2410      	movs	r4, #16
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	0018      	movs	r0, r3
 80005fc:	2330      	movs	r3, #48	; 0x30
 80005fe:	001a      	movs	r2, r3
 8000600:	2100      	movs	r1, #0
 8000602:	f003 f84d 	bl	80036a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000606:	003b      	movs	r3, r7
 8000608:	0018      	movs	r0, r3
 800060a:	2310      	movs	r3, #16
 800060c:	001a      	movs	r2, r3
 800060e:	2100      	movs	r1, #0
 8000610:	f003 f846 	bl	80036a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	0021      	movs	r1, r4
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2201      	movs	r2, #1
 800061a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2201      	movs	r2, #1
 8000620:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2202      	movs	r2, #2
 8000626:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	0252      	lsls	r2, r2, #9
 800062e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	0352      	lsls	r2, r2, #13
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	187b      	adds	r3, r7, r1
 8000640:	0018      	movs	r0, r3
 8000642:	f000 fe97 	bl	8001374 <HAL_RCC_OscConfig>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800064a:	f000 f9a7 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	003b      	movs	r3, r7
 8000650:	2207      	movs	r2, #7
 8000652:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	003b      	movs	r3, r7
 8000656:	2202      	movs	r2, #2
 8000658:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	003b      	movs	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	003b      	movs	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000666:	003b      	movs	r3, r7
 8000668:	2101      	movs	r1, #1
 800066a:	0018      	movs	r0, r3
 800066c:	f001 f99c 	bl	80019a8 <HAL_RCC_ClockConfig>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000674:	f000 f992 	bl	800099c <Error_Handler>
  }
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	b011      	add	sp, #68	; 0x44
 800067e:	bd90      	pop	{r4, r7, pc}

08000680 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b092      	sub	sp, #72	; 0x48
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000686:	2340      	movs	r3, #64	; 0x40
 8000688:	18fb      	adds	r3, r7, r3
 800068a:	0018      	movs	r0, r3
 800068c:	2308      	movs	r3, #8
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f003 f805 	bl	80036a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000696:	2324      	movs	r3, #36	; 0x24
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	0018      	movs	r0, r3
 800069c:	231c      	movs	r3, #28
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f002 fffd 	bl	80036a0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	0018      	movs	r0, r3
 80006aa:	2320      	movs	r3, #32
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f002 fff6 	bl	80036a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006b4:	4b47      	ldr	r3, [pc, #284]	; (80007d4 <MX_TIM1_Init+0x154>)
 80006b6:	4a48      	ldr	r2, [pc, #288]	; (80007d8 <MX_TIM1_Init+0x158>)
 80006b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 479;
 80006ba:	4b46      	ldr	r3, [pc, #280]	; (80007d4 <MX_TIM1_Init+0x154>)
 80006bc:	22e0      	movs	r2, #224	; 0xe0
 80006be:	32ff      	adds	r2, #255	; 0xff
 80006c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b44      	ldr	r3, [pc, #272]	; (80007d4 <MX_TIM1_Init+0x154>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80006c8:	4b42      	ldr	r3, [pc, #264]	; (80007d4 <MX_TIM1_Init+0x154>)
 80006ca:	4a44      	ldr	r2, [pc, #272]	; (80007dc <MX_TIM1_Init+0x15c>)
 80006cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ce:	4b41      	ldr	r3, [pc, #260]	; (80007d4 <MX_TIM1_Init+0x154>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006d4:	4b3f      	ldr	r3, [pc, #252]	; (80007d4 <MX_TIM1_Init+0x154>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006da:	4b3e      	ldr	r3, [pc, #248]	; (80007d4 <MX_TIM1_Init+0x154>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006e0:	4b3c      	ldr	r3, [pc, #240]	; (80007d4 <MX_TIM1_Init+0x154>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 faa4 	bl	8001c30 <HAL_TIM_PWM_Init>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80006ec:	f000 f956 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006fe:	187a      	adds	r2, r7, r1
 8000700:	4b34      	ldr	r3, [pc, #208]	; (80007d4 <MX_TIM1_Init+0x154>)
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f001 ff39 	bl	800257c <HAL_TIMEx_MasterConfigSynchronization>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800070e:	f000 f945 	bl	800099c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000712:	2124      	movs	r1, #36	; 0x24
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2260      	movs	r2, #96	; 0x60
 8000718:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 150;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2296      	movs	r2, #150	; 0x96
 800071e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800073e:	1879      	adds	r1, r7, r1
 8000740:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <MX_TIM1_Init+0x154>)
 8000742:	2200      	movs	r2, #0
 8000744:	0018      	movs	r0, r3
 8000746:	f001 fbbd 	bl	8001ec4 <HAL_TIM_PWM_ConfigChannel>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800074e:	f000 f925 	bl	800099c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000752:	2324      	movs	r3, #36	; 0x24
 8000754:	18f9      	adds	r1, r7, r3
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_TIM1_Init+0x154>)
 8000758:	2204      	movs	r2, #4
 800075a:	0018      	movs	r0, r3
 800075c:	f001 fbb2 	bl	8001ec4 <HAL_TIM_PWM_ConfigChannel>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8000764:	f000 f91a 	bl	800099c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000768:	2124      	movs	r1, #36	; 0x24
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2200      	movs	r2, #0
 800076e:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000770:	1879      	adds	r1, r7, r1
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_TIM1_Init+0x154>)
 8000774:	2208      	movs	r2, #8
 8000776:	0018      	movs	r0, r3
 8000778:	f001 fba4 	bl	8001ec4 <HAL_TIM_PWM_ConfigChannel>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000780:	f000 f90c 	bl	800099c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	0192      	lsls	r2, r2, #6
 80007a8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007b0:	1d3a      	adds	r2, r7, #4
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_TIM1_Init+0x154>)
 80007b4:	0011      	movs	r1, r2
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 ff38 	bl	800262c <HAL_TIMEx_ConfigBreakDeadTime>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80007c0:	f000 f8ec 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <MX_TIM1_Init+0x154>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 f946 	bl	8000a58 <HAL_TIM_MspPostInit>

}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b012      	add	sp, #72	; 0x48
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000002c 	.word	0x2000002c
 80007d8:	40012c00 	.word	0x40012c00
 80007dc:	000007cf 	.word	0x000007cf

080007e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e6:	2320      	movs	r3, #32
 80007e8:	18fb      	adds	r3, r7, r3
 80007ea:	0018      	movs	r0, r3
 80007ec:	2308      	movs	r3, #8
 80007ee:	001a      	movs	r2, r3
 80007f0:	2100      	movs	r1, #0
 80007f2:	f002 ff55 	bl	80036a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	0018      	movs	r0, r3
 80007fa:	231c      	movs	r3, #28
 80007fc:	001a      	movs	r2, r3
 80007fe:	2100      	movs	r1, #0
 8000800:	f002 ff4e 	bl	80036a0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000804:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <MX_TIM3_Init+0xe8>)
 8000806:	4a31      	ldr	r2, [pc, #196]	; (80008cc <MX_TIM3_Init+0xec>)
 8000808:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 479;
 800080a:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <MX_TIM3_Init+0xe8>)
 800080c:	22e0      	movs	r2, #224	; 0xe0
 800080e:	32ff      	adds	r2, #255	; 0xff
 8000810:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_TIM3_Init+0xe8>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <MX_TIM3_Init+0xe8>)
 800081a:	4a2d      	ldr	r2, [pc, #180]	; (80008d0 <MX_TIM3_Init+0xf0>)
 800081c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_TIM3_Init+0xe8>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <MX_TIM3_Init+0xe8>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_TIM3_Init+0xe8>)
 800082c:	0018      	movs	r0, r3
 800082e:	f001 f9ff 	bl	8001c30 <HAL_TIM_PWM_Init>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000836:	f000 f8b1 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083a:	2120      	movs	r1, #32
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000848:	187a      	adds	r2, r7, r1
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_TIM3_Init+0xe8>)
 800084c:	0011      	movs	r1, r2
 800084e:	0018      	movs	r0, r3
 8000850:	f001 fe94 	bl	800257c <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000858:	f000 f8a0 	bl	800099c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2260      	movs	r2, #96	; 0x60
 8000860:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000874:	1d39      	adds	r1, r7, #4
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_TIM3_Init+0xe8>)
 8000878:	2200      	movs	r2, #0
 800087a:	0018      	movs	r0, r3
 800087c:	f001 fb22 	bl	8001ec4 <HAL_TIM_PWM_ConfigChannel>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8000884:	f000 f88a 	bl	800099c <Error_Handler>
  }
  sConfigOC.Pulse = 150;
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2296      	movs	r2, #150	; 0x96
 800088c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800088e:	1d39      	adds	r1, r7, #4
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_TIM3_Init+0xe8>)
 8000892:	2204      	movs	r2, #4
 8000894:	0018      	movs	r0, r3
 8000896:	f001 fb15 	bl	8001ec4 <HAL_TIM_PWM_ConfigChannel>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 800089e:	f000 f87d 	bl	800099c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008a2:	1d39      	adds	r1, r7, #4
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_TIM3_Init+0xe8>)
 80008a6:	2208      	movs	r2, #8
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 fb0b 	bl	8001ec4 <HAL_TIM_PWM_ConfigChannel>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80008b2:	f000 f873 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <MX_TIM3_Init+0xe8>)
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 f8cd 	bl	8000a58 <HAL_TIM_MspPostInit>

}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b00a      	add	sp, #40	; 0x28
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	20000074 	.word	0x20000074
 80008cc:	40000400 	.word	0x40000400
 80008d0:	000007cf 	.word	0x000007cf

080008d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008da:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_USART2_UART_Init+0x5c>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008e0:	2296      	movs	r2, #150	; 0x96
 80008e2:	0212      	lsls	r2, r2, #8
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000918:	0018      	movs	r0, r3
 800091a:	f001 fee5 	bl	80026e8 <HAL_UART_Init>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000922:	f000 f83b 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000bc 	.word	0x200000bc
 8000930:	40004400 	.word	0x40004400

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_GPIO_Init+0x64>)
 800093c:	695a      	ldr	r2, [r3, #20]
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_GPIO_Init+0x64>)
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	03c9      	lsls	r1, r1, #15
 8000944:	430a      	orrs	r2, r1
 8000946:	615a      	str	r2, [r3, #20]
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_GPIO_Init+0x64>)
 800094a:	695a      	ldr	r2, [r3, #20]
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	03db      	lsls	r3, r3, #15
 8000950:	4013      	ands	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_GPIO_Init+0x64>)
 8000958:	695a      	ldr	r2, [r3, #20]
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_GPIO_Init+0x64>)
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	0289      	lsls	r1, r1, #10
 8000960:	430a      	orrs	r2, r1
 8000962:	615a      	str	r2, [r3, #20]
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_GPIO_Init+0x64>)
 8000966:	695a      	ldr	r2, [r3, #20]
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	029b      	lsls	r3, r3, #10
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_GPIO_Init+0x64>)
 8000974:	695a      	ldr	r2, [r3, #20]
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_GPIO_Init+0x64>)
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	02c9      	lsls	r1, r1, #11
 800097c:	430a      	orrs	r2, r1
 800097e:	615a      	str	r2, [r3, #20]
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <MX_GPIO_Init+0x64>)
 8000982:	695a      	ldr	r2, [r3, #20]
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	02db      	lsls	r3, r3, #11
 8000988:	4013      	ands	r3, r2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b004      	add	sp, #16
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	40021000 	.word	0x40021000

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <HAL_MspInit+0x44>)
 80009b0:	699a      	ldr	r2, [r3, #24]
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_MspInit+0x44>)
 80009b4:	2101      	movs	r1, #1
 80009b6:	430a      	orrs	r2, r1
 80009b8:	619a      	str	r2, [r3, #24]
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <HAL_MspInit+0x44>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	2201      	movs	r2, #1
 80009c0:	4013      	ands	r3, r2
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_MspInit+0x44>)
 80009c8:	69da      	ldr	r2, [r3, #28]
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_MspInit+0x44>)
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	0549      	lsls	r1, r1, #21
 80009d0:	430a      	orrs	r2, r1
 80009d2:	61da      	str	r2, [r3, #28]
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_MspInit+0x44>)
 80009d6:	69da      	ldr	r2, [r3, #28]
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	055b      	lsls	r3, r3, #21
 80009dc:	4013      	ands	r3, r2
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b002      	add	sp, #8
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <HAL_TIM_PWM_MspInit+0x5c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d10e      	bne.n	8000a20 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <HAL_TIM_PWM_MspInit+0x60>)
 8000a04:	699a      	ldr	r2, [r3, #24]
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_TIM_PWM_MspInit+0x60>)
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	0109      	lsls	r1, r1, #4
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	619a      	str	r2, [r3, #24]
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_TIM_PWM_MspInit+0x60>)
 8000a12:	699a      	ldr	r2, [r3, #24]
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	011b      	lsls	r3, r3, #4
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a1e:	e010      	b.n	8000a42 <HAL_TIM_PWM_MspInit+0x52>
  else if(htim_pwm->Instance==TIM3)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <HAL_TIM_PWM_MspInit+0x64>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d10b      	bne.n	8000a42 <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_TIM_PWM_MspInit+0x60>)
 8000a2c:	69da      	ldr	r2, [r3, #28]
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_TIM_PWM_MspInit+0x60>)
 8000a30:	2102      	movs	r1, #2
 8000a32:	430a      	orrs	r2, r1
 8000a34:	61da      	str	r2, [r3, #28]
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_TIM_PWM_MspInit+0x60>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b004      	add	sp, #16
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	40012c00 	.word	0x40012c00
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40000400 	.word	0x40000400

08000a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b08b      	sub	sp, #44	; 0x2c
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	2414      	movs	r4, #20
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	0018      	movs	r0, r3
 8000a66:	2314      	movs	r3, #20
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f002 fe18 	bl	80036a0 <memset>
  if(htim->Instance==TIM1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a3d      	ldr	r2, [pc, #244]	; (8000b6c <HAL_TIM_MspPostInit+0x114>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d126      	bne.n	8000ac8 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <HAL_TIM_MspPostInit+0x118>)
 8000a7c:	695a      	ldr	r2, [r3, #20]
 8000a7e:	4b3c      	ldr	r3, [pc, #240]	; (8000b70 <HAL_TIM_MspPostInit+0x118>)
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	0289      	lsls	r1, r1, #10
 8000a84:	430a      	orrs	r2, r1
 8000a86:	615a      	str	r2, [r3, #20]
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <HAL_TIM_MspPostInit+0x118>)
 8000a8a:	695a      	ldr	r2, [r3, #20]
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	029b      	lsls	r3, r3, #10
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	22e0      	movs	r2, #224	; 0xe0
 8000a9a:	00d2      	lsls	r2, r2, #3
 8000a9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	0021      	movs	r1, r4
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	187a      	adds	r2, r7, r1
 8000aba:	2390      	movs	r3, #144	; 0x90
 8000abc:	05db      	lsls	r3, r3, #23
 8000abe:	0011      	movs	r1, r2
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f000 fae7 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ac6:	e04d      	b.n	8000b64 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM3)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a29      	ldr	r2, [pc, #164]	; (8000b74 <HAL_TIM_MspPostInit+0x11c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d148      	bne.n	8000b64 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <HAL_TIM_MspPostInit+0x118>)
 8000ad4:	695a      	ldr	r2, [r3, #20]
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <HAL_TIM_MspPostInit+0x118>)
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	0289      	lsls	r1, r1, #10
 8000adc:	430a      	orrs	r2, r1
 8000ade:	615a      	str	r2, [r3, #20]
 8000ae0:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <HAL_TIM_MspPostInit+0x118>)
 8000ae2:	695a      	ldr	r2, [r3, #20]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	029b      	lsls	r3, r3, #10
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <HAL_TIM_MspPostInit+0x118>)
 8000af0:	695a      	ldr	r2, [r3, #20]
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <HAL_TIM_MspPostInit+0x118>)
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	02c9      	lsls	r1, r1, #11
 8000af8:	430a      	orrs	r2, r1
 8000afa:	615a      	str	r2, [r3, #20]
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <HAL_TIM_MspPostInit+0x118>)
 8000afe:	695a      	ldr	r2, [r3, #20]
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	02db      	lsls	r3, r3, #11
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b0a:	2414      	movs	r4, #20
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	22c0      	movs	r2, #192	; 0xc0
 8000b10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2202      	movs	r2, #2
 8000b16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	2201      	movs	r2, #1
 8000b28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	193a      	adds	r2, r7, r4
 8000b2c:	2390      	movs	r3, #144	; 0x90
 8000b2e:	05db      	lsls	r3, r3, #23
 8000b30:	0011      	movs	r1, r2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 faae 	bl	8001094 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b38:	0021      	movs	r1, r4
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2202      	movs	r2, #2
 8000b44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2201      	movs	r2, #1
 8000b56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_TIM_MspPostInit+0x120>)
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	0010      	movs	r0, r2
 8000b60:	f000 fa98 	bl	8001094 <HAL_GPIO_Init>
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b00b      	add	sp, #44	; 0x2c
 8000b6a:	bd90      	pop	{r4, r7, pc}
 8000b6c:	40012c00 	.word	0x40012c00
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40000400 	.word	0x40000400
 8000b78:	48000400 	.word	0x48000400

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b08b      	sub	sp, #44	; 0x2c
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	2414      	movs	r4, #20
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	0018      	movs	r0, r3
 8000b8a:	2314      	movs	r3, #20
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f002 fd86 	bl	80036a0 <memset>
  if(huart->Instance==USART2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a20      	ldr	r2, [pc, #128]	; (8000c1c <HAL_UART_MspInit+0xa0>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d13a      	bne.n	8000c14 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9e:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <HAL_UART_MspInit+0xa4>)
 8000ba0:	69da      	ldr	r2, [r3, #28]
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <HAL_UART_MspInit+0xa4>)
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	0289      	lsls	r1, r1, #10
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	61da      	str	r2, [r3, #28]
 8000bac:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <HAL_UART_MspInit+0xa4>)
 8000bae:	69da      	ldr	r2, [r3, #28]
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	029b      	lsls	r3, r3, #10
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <HAL_UART_MspInit+0xa4>)
 8000bbc:	695a      	ldr	r2, [r3, #20]
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_UART_MspInit+0xa4>)
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	0289      	lsls	r1, r1, #10
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	615a      	str	r2, [r3, #20]
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_UART_MspInit+0xa4>)
 8000bca:	695a      	ldr	r2, [r3, #20]
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	029b      	lsls	r3, r3, #10
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bd6:	0021      	movs	r1, r4
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	220c      	movs	r2, #12
 8000bdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2202      	movs	r2, #2
 8000be2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2203      	movs	r2, #3
 8000bee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	187a      	adds	r2, r7, r1
 8000bf8:	2390      	movs	r3, #144	; 0x90
 8000bfa:	05db      	lsls	r3, r3, #23
 8000bfc:	0011      	movs	r1, r2
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 fa48 	bl	8001094 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2100      	movs	r1, #0
 8000c08:	201c      	movs	r0, #28
 8000c0a:	f000 f993 	bl	8000f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c0e:	201c      	movs	r0, #28
 8000c10:	f000 f9a5 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b00b      	add	sp, #44	; 0x2c
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	40021000 	.word	0x40021000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c48:	f000 f888 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <USART2_IRQHandler+0x14>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f001 fe6c 	bl	8002938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	200000bc 	.word	0x200000bc

08000c6c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c7c:	f7ff fff6 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c82:	490d      	ldr	r1, [pc, #52]	; (8000cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <LoopForever+0xe>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c98:	4c0a      	ldr	r4, [pc, #40]	; (8000cc4 <LoopForever+0x16>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ca6:	f002 fcd7 	bl	8003658 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000caa:	f7ff fbef 	bl	800048c <main>

08000cae <LoopForever>:

LoopForever:
    b LoopForever
 8000cae:	e7fe      	b.n	8000cae <LoopForever>
  ldr   r0, =_estack
 8000cb0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000cbc:	08003708 	.word	0x08003708
  ldr r2, =_sbss
 8000cc0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cc4:	2000016c 	.word	0x2000016c

08000cc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC1_IRQHandler>
	...

08000ccc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <HAL_Init+0x24>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_Init+0x24>)
 8000cd6:	2110      	movs	r1, #16
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f809 	bl	8000cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce2:	f7ff fe61 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	40022000 	.word	0x40022000

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_InitTick+0x5c>)
 8000cfe:	681c      	ldr	r4, [r3, #0]
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <HAL_InitTick+0x60>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	0019      	movs	r1, r3
 8000d06:	23fa      	movs	r3, #250	; 0xfa
 8000d08:	0098      	lsls	r0, r3, #2
 8000d0a:	f7ff f9fd 	bl	8000108 <__udivsi3>
 8000d0e:	0003      	movs	r3, r0
 8000d10:	0019      	movs	r1, r3
 8000d12:	0020      	movs	r0, r4
 8000d14:	f7ff f9f8 	bl	8000108 <__udivsi3>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 f92f 	bl	8000f7e <HAL_SYSTICK_Config>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d001      	beq.n	8000d28 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e00f      	b.n	8000d48 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d80b      	bhi.n	8000d46 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	2301      	movs	r3, #1
 8000d32:	425b      	negs	r3, r3
 8000d34:	2200      	movs	r2, #0
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 f8fc 	bl	8000f34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_InitTick+0x64>)
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b003      	add	sp, #12
 8000d4e:	bd90      	pop	{r4, r7, pc}
 8000d50:	20000004 	.word	0x20000004
 8000d54:	2000000c 	.word	0x2000000c
 8000d58:	20000008 	.word	0x20000008

08000d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_IncTick+0x1c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	001a      	movs	r2, r3
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_IncTick+0x20>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	18d2      	adds	r2, r2, r3
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_IncTick+0x20>)
 8000d6e:	601a      	str	r2, [r3, #0]
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	2000000c 	.word	0x2000000c
 8000d7c:	20000168 	.word	0x20000168

08000d80 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <HAL_GetTick+0x10>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	0018      	movs	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	20000168 	.word	0x20000168

08000d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d9c:	f7ff fff0 	bl	8000d80 <HAL_GetTick>
 8000da0:	0003      	movs	r3, r0
 8000da2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3301      	adds	r3, #1
 8000dac:	d005      	beq.n	8000dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_Delay+0x44>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	001a      	movs	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	189b      	adds	r3, r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	f7ff ffe0 	bl	8000d80 <HAL_GetTick>
 8000dc0:	0002      	movs	r2, r0
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d8f7      	bhi.n	8000dbc <HAL_Delay+0x28>
  {
  }
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b004      	add	sp, #16
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	2000000c 	.word	0x2000000c

08000ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	0002      	movs	r2, r0
 8000de4:	1dfb      	adds	r3, r7, #7
 8000de6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b7f      	cmp	r3, #127	; 0x7f
 8000dee:	d809      	bhi.n	8000e04 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df0:	1dfb      	adds	r3, r7, #7
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	001a      	movs	r2, r3
 8000df6:	231f      	movs	r3, #31
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_EnableIRQ+0x30>)
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4091      	lsls	r1, r2
 8000e00:	000a      	movs	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]
  }
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b002      	add	sp, #8
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	0002      	movs	r2, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b7f      	cmp	r3, #127	; 0x7f
 8000e24:	d828      	bhi.n	8000e78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e26:	4a2f      	ldr	r2, [pc, #188]	; (8000ee4 <__NVIC_SetPriority+0xd4>)
 8000e28:	1dfb      	adds	r3, r7, #7
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	33c0      	adds	r3, #192	; 0xc0
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	589b      	ldr	r3, [r3, r2]
 8000e36:	1dfa      	adds	r2, r7, #7
 8000e38:	7812      	ldrb	r2, [r2, #0]
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	400a      	ands	r2, r1
 8000e40:	00d2      	lsls	r2, r2, #3
 8000e42:	21ff      	movs	r1, #255	; 0xff
 8000e44:	4091      	lsls	r1, r2
 8000e46:	000a      	movs	r2, r1
 8000e48:	43d2      	mvns	r2, r2
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	019b      	lsls	r3, r3, #6
 8000e52:	22ff      	movs	r2, #255	; 0xff
 8000e54:	401a      	ands	r2, r3
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	4003      	ands	r3, r0
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e64:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <__NVIC_SetPriority+0xd4>)
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	33c0      	adds	r3, #192	; 0xc0
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e76:	e031      	b.n	8000edc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <__NVIC_SetPriority+0xd8>)
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	0019      	movs	r1, r3
 8000e80:	230f      	movs	r3, #15
 8000e82:	400b      	ands	r3, r1
 8000e84:	3b08      	subs	r3, #8
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	3306      	adds	r3, #6
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	18d3      	adds	r3, r2, r3
 8000e8e:	3304      	adds	r3, #4
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	1dfa      	adds	r2, r7, #7
 8000e94:	7812      	ldrb	r2, [r2, #0]
 8000e96:	0011      	movs	r1, r2
 8000e98:	2203      	movs	r2, #3
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	00d2      	lsls	r2, r2, #3
 8000e9e:	21ff      	movs	r1, #255	; 0xff
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	000a      	movs	r2, r1
 8000ea4:	43d2      	mvns	r2, r2
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	019b      	lsls	r3, r3, #6
 8000eae:	22ff      	movs	r2, #255	; 0xff
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	2303      	movs	r3, #3
 8000eba:	4003      	ands	r3, r0
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec0:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <__NVIC_SetPriority+0xd8>)
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	001c      	movs	r4, r3
 8000ec8:	230f      	movs	r3, #15
 8000eca:	4023      	ands	r3, r4
 8000ecc:	3b08      	subs	r3, #8
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	3306      	adds	r3, #6
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	18c3      	adds	r3, r0, r3
 8000ed8:	3304      	adds	r3, #4
 8000eda:	601a      	str	r2, [r3, #0]
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b003      	add	sp, #12
 8000ee2:	bd90      	pop	{r4, r7, pc}
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	1e5a      	subs	r2, r3, #1
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	045b      	lsls	r3, r3, #17
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d301      	bcc.n	8000f04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f00:	2301      	movs	r3, #1
 8000f02:	e010      	b.n	8000f26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <SysTick_Config+0x44>)
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	3a01      	subs	r2, #1
 8000f0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	425b      	negs	r3, r3
 8000f10:	2103      	movs	r1, #3
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff ff7c 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <SysTick_Config+0x44>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SysTick_Config+0x44>)
 8000f20:	2207      	movs	r2, #7
 8000f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	0018      	movs	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b002      	add	sp, #8
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	e000e010 	.word	0xe000e010

08000f34 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	210f      	movs	r1, #15
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	1c02      	adds	r2, r0, #0
 8000f44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	0011      	movs	r1, r2
 8000f50:	0018      	movs	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b004      	add	sp, #16
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	0002      	movs	r2, r0
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b25b      	sxtb	r3, r3
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff ff33 	bl	8000ddc <__NVIC_EnableIRQ>
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff ffaf 	bl	8000eec <SysTick_Config>
 8000f8e:	0003      	movs	r3, r0
}
 8000f90:	0018      	movs	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b002      	add	sp, #8
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2221      	movs	r2, #33	; 0x21
 8000fa4:	5c9b      	ldrb	r3, [r3, r2]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d008      	beq.n	8000fbe <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2204      	movs	r2, #4
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2220      	movs	r2, #32
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e020      	b.n	8001000 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	210e      	movs	r1, #14
 8000fca:	438a      	bics	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	438a      	bics	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4091      	lsls	r1, r2
 8000fea:	000a      	movs	r2, r1
 8000fec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2221      	movs	r2, #33	; 0x21
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	0018      	movs	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	b002      	add	sp, #8
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001010:	210f      	movs	r1, #15
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2221      	movs	r2, #33	; 0x21
 800101c:	5c9b      	ldrb	r3, [r3, r2]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d006      	beq.n	8001032 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2204      	movs	r2, #4
 8001028:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800102a:	187b      	adds	r3, r7, r1
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	e028      	b.n	8001084 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	210e      	movs	r1, #14
 800103e:	438a      	bics	r2, r1
 8001040:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2101      	movs	r1, #1
 800104e:	438a      	bics	r2, r1
 8001050:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800105a:	2101      	movs	r1, #1
 800105c:	4091      	lsls	r1, r2
 800105e:	000a      	movs	r2, r1
 8001060:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2221      	movs	r2, #33	; 0x21
 8001066:	2101      	movs	r1, #1
 8001068:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2220      	movs	r2, #32
 800106e:	2100      	movs	r1, #0
 8001070:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	0010      	movs	r0, r2
 8001082:	4798      	blx	r3
    }
  }
  return status;
 8001084:	230f      	movs	r3, #15
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	781b      	ldrb	r3, [r3, #0]
}
 800108a:	0018      	movs	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	b004      	add	sp, #16
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a2:	e14f      	b.n	8001344 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2101      	movs	r1, #1
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4091      	lsls	r1, r2
 80010ae:	000a      	movs	r2, r1
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d100      	bne.n	80010bc <HAL_GPIO_Init+0x28>
 80010ba:	e140      	b.n	800133e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2203      	movs	r2, #3
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d005      	beq.n	80010d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2203      	movs	r2, #3
 80010ce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d130      	bne.n	8001136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	409a      	lsls	r2, r3
 80010e2:	0013      	movs	r3, r2
 80010e4:	43da      	mvns	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	409a      	lsls	r2, r3
 80010f6:	0013      	movs	r3, r2
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110a:	2201      	movs	r2, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	2201      	movs	r2, #1
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2203      	movs	r2, #3
 800113c:	4013      	ands	r3, r2
 800113e:	2b03      	cmp	r3, #3
 8001140:	d017      	beq.n	8001172 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	409a      	lsls	r2, r3
 8001150:	0013      	movs	r3, r2
 8001152:	43da      	mvns	r2, r3
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2203      	movs	r2, #3
 8001178:	4013      	ands	r3, r2
 800117a:	2b02      	cmp	r3, #2
 800117c:	d123      	bne.n	80011c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	58d3      	ldr	r3, [r2, r3]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	2207      	movs	r2, #7
 8001190:	4013      	ands	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	409a      	lsls	r2, r3
 8001198:	0013      	movs	r3, r2
 800119a:	43da      	mvns	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	691a      	ldr	r2, [r3, #16]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2107      	movs	r1, #7
 80011aa:	400b      	ands	r3, r1
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	0092      	lsls	r2, r2, #2
 80011c2:	6939      	ldr	r1, [r7, #16]
 80011c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	43da      	mvns	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2203      	movs	r2, #3
 80011e4:	401a      	ands	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	23c0      	movs	r3, #192	; 0xc0
 8001200:	029b      	lsls	r3, r3, #10
 8001202:	4013      	ands	r3, r2
 8001204:	d100      	bne.n	8001208 <HAL_GPIO_Init+0x174>
 8001206:	e09a      	b.n	800133e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001208:	4b54      	ldr	r3, [pc, #336]	; (800135c <HAL_GPIO_Init+0x2c8>)
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	4b53      	ldr	r3, [pc, #332]	; (800135c <HAL_GPIO_Init+0x2c8>)
 800120e:	2101      	movs	r1, #1
 8001210:	430a      	orrs	r2, r1
 8001212:	619a      	str	r2, [r3, #24]
 8001214:	4b51      	ldr	r3, [pc, #324]	; (800135c <HAL_GPIO_Init+0x2c8>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	2201      	movs	r2, #1
 800121a:	4013      	ands	r3, r2
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001220:	4a4f      	ldr	r2, [pc, #316]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	589b      	ldr	r3, [r3, r2]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2203      	movs	r2, #3
 8001232:	4013      	ands	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	409a      	lsls	r2, r3
 800123a:	0013      	movs	r3, r2
 800123c:	43da      	mvns	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	2390      	movs	r3, #144	; 0x90
 8001248:	05db      	lsls	r3, r3, #23
 800124a:	429a      	cmp	r2, r3
 800124c:	d013      	beq.n	8001276 <HAL_GPIO_Init+0x1e2>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a44      	ldr	r2, [pc, #272]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d00d      	beq.n	8001272 <HAL_GPIO_Init+0x1de>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a43      	ldr	r2, [pc, #268]	; (8001368 <HAL_GPIO_Init+0x2d4>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d007      	beq.n	800126e <HAL_GPIO_Init+0x1da>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a42      	ldr	r2, [pc, #264]	; (800136c <HAL_GPIO_Init+0x2d8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_GPIO_Init+0x1d6>
 8001266:	2303      	movs	r3, #3
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x1e4>
 800126a:	2305      	movs	r3, #5
 800126c:	e004      	b.n	8001278 <HAL_GPIO_Init+0x1e4>
 800126e:	2302      	movs	r3, #2
 8001270:	e002      	b.n	8001278 <HAL_GPIO_Init+0x1e4>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x1e4>
 8001276:	2300      	movs	r3, #0
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	2103      	movs	r1, #3
 800127c:	400a      	ands	r2, r1
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4093      	lsls	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001288:	4935      	ldr	r1, [pc, #212]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001296:	4b36      	ldr	r3, [pc, #216]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43da      	mvns	r2, r3
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	035b      	lsls	r3, r3, #13
 80012ae:	4013      	ands	r3, r2
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	43da      	mvns	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	039b      	lsls	r3, r3, #14
 80012d8:	4013      	ands	r3, r2
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43da      	mvns	r2, r3
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	029b      	lsls	r3, r3, #10
 8001302:	4013      	ands	r3, r2
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43da      	mvns	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	025b      	lsls	r3, r3, #9
 800132c:	4013      	ands	r3, r2
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001338:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	40da      	lsrs	r2, r3
 800134c:	1e13      	subs	r3, r2, #0
 800134e:	d000      	beq.n	8001352 <HAL_GPIO_Init+0x2be>
 8001350:	e6a8      	b.n	80010a4 <HAL_GPIO_Init+0x10>
  } 
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b006      	add	sp, #24
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000
 8001364:	48000400 	.word	0x48000400
 8001368:	48000800 	.word	0x48000800
 800136c:	48000c00 	.word	0x48000c00
 8001370:	40010400 	.word	0x40010400

08001374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e301      	b.n	800198a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2201      	movs	r2, #1
 800138c:	4013      	ands	r3, r2
 800138e:	d100      	bne.n	8001392 <HAL_RCC_OscConfig+0x1e>
 8001390:	e08d      	b.n	80014ae <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001392:	4bc3      	ldr	r3, [pc, #780]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	220c      	movs	r2, #12
 8001398:	4013      	ands	r3, r2
 800139a:	2b04      	cmp	r3, #4
 800139c:	d00e      	beq.n	80013bc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800139e:	4bc0      	ldr	r3, [pc, #768]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	220c      	movs	r2, #12
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d116      	bne.n	80013d8 <HAL_RCC_OscConfig+0x64>
 80013aa:	4bbd      	ldr	r3, [pc, #756]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	025b      	lsls	r3, r3, #9
 80013b2:	401a      	ands	r2, r3
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	025b      	lsls	r3, r3, #9
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d10d      	bne.n	80013d8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	4bb8      	ldr	r3, [pc, #736]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	029b      	lsls	r3, r3, #10
 80013c4:	4013      	ands	r3, r2
 80013c6:	d100      	bne.n	80013ca <HAL_RCC_OscConfig+0x56>
 80013c8:	e070      	b.n	80014ac <HAL_RCC_OscConfig+0x138>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d000      	beq.n	80013d4 <HAL_RCC_OscConfig+0x60>
 80013d2:	e06b      	b.n	80014ac <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e2d8      	b.n	800198a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d107      	bne.n	80013f0 <HAL_RCC_OscConfig+0x7c>
 80013e0:	4baf      	ldr	r3, [pc, #700]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4bae      	ldr	r3, [pc, #696]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	0249      	lsls	r1, r1, #9
 80013ea:	430a      	orrs	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e02f      	b.n	8001450 <HAL_RCC_OscConfig+0xdc>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10c      	bne.n	8001412 <HAL_RCC_OscConfig+0x9e>
 80013f8:	4ba9      	ldr	r3, [pc, #676]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4ba8      	ldr	r3, [pc, #672]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	49a9      	ldr	r1, [pc, #676]	; (80016a4 <HAL_RCC_OscConfig+0x330>)
 8001400:	400a      	ands	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	4ba6      	ldr	r3, [pc, #664]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 800140a:	49a7      	ldr	r1, [pc, #668]	; (80016a8 <HAL_RCC_OscConfig+0x334>)
 800140c:	400a      	ands	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e01e      	b.n	8001450 <HAL_RCC_OscConfig+0xdc>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b05      	cmp	r3, #5
 8001418:	d10e      	bne.n	8001438 <HAL_RCC_OscConfig+0xc4>
 800141a:	4ba1      	ldr	r3, [pc, #644]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4ba0      	ldr	r3, [pc, #640]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	02c9      	lsls	r1, r1, #11
 8001424:	430a      	orrs	r2, r1
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	4b9d      	ldr	r3, [pc, #628]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b9c      	ldr	r3, [pc, #624]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	0249      	lsls	r1, r1, #9
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e00b      	b.n	8001450 <HAL_RCC_OscConfig+0xdc>
 8001438:	4b99      	ldr	r3, [pc, #612]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b98      	ldr	r3, [pc, #608]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 800143e:	4999      	ldr	r1, [pc, #612]	; (80016a4 <HAL_RCC_OscConfig+0x330>)
 8001440:	400a      	ands	r2, r1
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	4b96      	ldr	r3, [pc, #600]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b95      	ldr	r3, [pc, #596]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 800144a:	4997      	ldr	r1, [pc, #604]	; (80016a8 <HAL_RCC_OscConfig+0x334>)
 800144c:	400a      	ands	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d014      	beq.n	8001482 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fc92 	bl	8000d80 <HAL_GetTick>
 800145c:	0003      	movs	r3, r0
 800145e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001462:	f7ff fc8d 	bl	8000d80 <HAL_GetTick>
 8001466:	0002      	movs	r2, r0
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b64      	cmp	r3, #100	; 0x64
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e28a      	b.n	800198a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001474:	4b8a      	ldr	r3, [pc, #552]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	029b      	lsls	r3, r3, #10
 800147c:	4013      	ands	r3, r2
 800147e:	d0f0      	beq.n	8001462 <HAL_RCC_OscConfig+0xee>
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff fc7d 	bl	8000d80 <HAL_GetTick>
 8001486:	0003      	movs	r3, r0
 8001488:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fc78 	bl	8000d80 <HAL_GetTick>
 8001490:	0002      	movs	r2, r0
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e275      	b.n	800198a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	4b80      	ldr	r3, [pc, #512]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	029b      	lsls	r3, r3, #10
 80014a6:	4013      	ands	r3, r2
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x118>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2202      	movs	r2, #2
 80014b4:	4013      	ands	r3, r2
 80014b6:	d100      	bne.n	80014ba <HAL_RCC_OscConfig+0x146>
 80014b8:	e069      	b.n	800158e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014ba:	4b79      	ldr	r3, [pc, #484]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	220c      	movs	r2, #12
 80014c0:	4013      	ands	r3, r2
 80014c2:	d00b      	beq.n	80014dc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014c4:	4b76      	ldr	r3, [pc, #472]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	220c      	movs	r2, #12
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d11c      	bne.n	800150a <HAL_RCC_OscConfig+0x196>
 80014d0:	4b73      	ldr	r3, [pc, #460]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	025b      	lsls	r3, r3, #9
 80014d8:	4013      	ands	r3, r2
 80014da:	d116      	bne.n	800150a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014dc:	4b70      	ldr	r3, [pc, #448]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2202      	movs	r2, #2
 80014e2:	4013      	ands	r3, r2
 80014e4:	d005      	beq.n	80014f2 <HAL_RCC_OscConfig+0x17e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d001      	beq.n	80014f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e24b      	b.n	800198a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f2:	4b6b      	ldr	r3, [pc, #428]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	22f8      	movs	r2, #248	; 0xf8
 80014f8:	4393      	bics	r3, r2
 80014fa:	0019      	movs	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	00da      	lsls	r2, r3, #3
 8001502:	4b67      	ldr	r3, [pc, #412]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001504:	430a      	orrs	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001508:	e041      	b.n	800158e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d024      	beq.n	800155c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001512:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b62      	ldr	r3, [pc, #392]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001518:	2101      	movs	r1, #1
 800151a:	430a      	orrs	r2, r1
 800151c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff fc2f 	bl	8000d80 <HAL_GetTick>
 8001522:	0003      	movs	r3, r0
 8001524:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001528:	f7ff fc2a 	bl	8000d80 <HAL_GetTick>
 800152c:	0002      	movs	r2, r0
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e227      	b.n	800198a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153a:	4b59      	ldr	r3, [pc, #356]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2202      	movs	r2, #2
 8001540:	4013      	ands	r3, r2
 8001542:	d0f1      	beq.n	8001528 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001544:	4b56      	ldr	r3, [pc, #344]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	22f8      	movs	r2, #248	; 0xf8
 800154a:	4393      	bics	r3, r2
 800154c:	0019      	movs	r1, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00da      	lsls	r2, r3, #3
 8001554:	4b52      	ldr	r3, [pc, #328]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e018      	b.n	800158e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b4f      	ldr	r3, [pc, #316]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001562:	2101      	movs	r1, #1
 8001564:	438a      	bics	r2, r1
 8001566:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fc0a 	bl	8000d80 <HAL_GetTick>
 800156c:	0003      	movs	r3, r0
 800156e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001572:	f7ff fc05 	bl	8000d80 <HAL_GetTick>
 8001576:	0002      	movs	r2, r0
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e202      	b.n	800198a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001584:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2202      	movs	r2, #2
 800158a:	4013      	ands	r3, r2
 800158c:	d1f1      	bne.n	8001572 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2208      	movs	r2, #8
 8001594:	4013      	ands	r3, r2
 8001596:	d036      	beq.n	8001606 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d019      	beq.n	80015d4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a0:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80015a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a4:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80015a6:	2101      	movs	r1, #1
 80015a8:	430a      	orrs	r2, r1
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff fbe8 	bl	8000d80 <HAL_GetTick>
 80015b0:	0003      	movs	r3, r0
 80015b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b6:	f7ff fbe3 	bl	8000d80 <HAL_GetTick>
 80015ba:	0002      	movs	r2, r0
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e1e0      	b.n	800198a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c8:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	2202      	movs	r2, #2
 80015ce:	4013      	ands	r3, r2
 80015d0:	d0f1      	beq.n	80015b6 <HAL_RCC_OscConfig+0x242>
 80015d2:	e018      	b.n	8001606 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d4:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80015d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015d8:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80015da:	2101      	movs	r1, #1
 80015dc:	438a      	bics	r2, r1
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff fbce 	bl	8000d80 <HAL_GetTick>
 80015e4:	0003      	movs	r3, r0
 80015e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ea:	f7ff fbc9 	bl	8000d80 <HAL_GetTick>
 80015ee:	0002      	movs	r2, r0
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e1c6      	b.n	800198a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	2202      	movs	r2, #2
 8001602:	4013      	ands	r3, r2
 8001604:	d1f1      	bne.n	80015ea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2204      	movs	r2, #4
 800160c:	4013      	ands	r3, r2
 800160e:	d100      	bne.n	8001612 <HAL_RCC_OscConfig+0x29e>
 8001610:	e0b4      	b.n	800177c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001612:	201f      	movs	r0, #31
 8001614:	183b      	adds	r3, r7, r0
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	055b      	lsls	r3, r3, #21
 8001622:	4013      	ands	r3, r2
 8001624:	d110      	bne.n	8001648 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001628:	69da      	ldr	r2, [r3, #28]
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	0549      	lsls	r1, r1, #21
 8001630:	430a      	orrs	r2, r1
 8001632:	61da      	str	r2, [r3, #28]
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001636:	69da      	ldr	r2, [r3, #28]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	055b      	lsls	r3, r3, #21
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001642:	183b      	adds	r3, r7, r0
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HAL_RCC_OscConfig+0x338>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4013      	ands	r3, r2
 8001652:	d11a      	bne.n	800168a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_RCC_OscConfig+0x338>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_RCC_OscConfig+0x338>)
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	0049      	lsls	r1, r1, #1
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001662:	f7ff fb8d 	bl	8000d80 <HAL_GetTick>
 8001666:	0003      	movs	r3, r0
 8001668:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166c:	f7ff fb88 	bl	8000d80 <HAL_GetTick>
 8001670:	0002      	movs	r2, r0
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e185      	b.n	800198a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_RCC_OscConfig+0x338>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4013      	ands	r3, r2
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d10e      	bne.n	80016b0 <HAL_RCC_OscConfig+0x33c>
 8001692:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001694:	6a1a      	ldr	r2, [r3, #32]
 8001696:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 8001698:	2101      	movs	r1, #1
 800169a:	430a      	orrs	r2, r1
 800169c:	621a      	str	r2, [r3, #32]
 800169e:	e035      	b.n	800170c <HAL_RCC_OscConfig+0x398>
 80016a0:	40021000 	.word	0x40021000
 80016a4:	fffeffff 	.word	0xfffeffff
 80016a8:	fffbffff 	.word	0xfffbffff
 80016ac:	40007000 	.word	0x40007000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10c      	bne.n	80016d2 <HAL_RCC_OscConfig+0x35e>
 80016b8:	4bb6      	ldr	r3, [pc, #728]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80016ba:	6a1a      	ldr	r2, [r3, #32]
 80016bc:	4bb5      	ldr	r3, [pc, #724]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80016be:	2101      	movs	r1, #1
 80016c0:	438a      	bics	r2, r1
 80016c2:	621a      	str	r2, [r3, #32]
 80016c4:	4bb3      	ldr	r3, [pc, #716]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	4bb2      	ldr	r3, [pc, #712]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80016ca:	2104      	movs	r1, #4
 80016cc:	438a      	bics	r2, r1
 80016ce:	621a      	str	r2, [r3, #32]
 80016d0:	e01c      	b.n	800170c <HAL_RCC_OscConfig+0x398>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x380>
 80016da:	4bae      	ldr	r3, [pc, #696]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80016dc:	6a1a      	ldr	r2, [r3, #32]
 80016de:	4bad      	ldr	r3, [pc, #692]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80016e0:	2104      	movs	r1, #4
 80016e2:	430a      	orrs	r2, r1
 80016e4:	621a      	str	r2, [r3, #32]
 80016e6:	4bab      	ldr	r3, [pc, #684]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80016e8:	6a1a      	ldr	r2, [r3, #32]
 80016ea:	4baa      	ldr	r3, [pc, #680]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80016ec:	2101      	movs	r1, #1
 80016ee:	430a      	orrs	r2, r1
 80016f0:	621a      	str	r2, [r3, #32]
 80016f2:	e00b      	b.n	800170c <HAL_RCC_OscConfig+0x398>
 80016f4:	4ba7      	ldr	r3, [pc, #668]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80016f6:	6a1a      	ldr	r2, [r3, #32]
 80016f8:	4ba6      	ldr	r3, [pc, #664]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80016fa:	2101      	movs	r1, #1
 80016fc:	438a      	bics	r2, r1
 80016fe:	621a      	str	r2, [r3, #32]
 8001700:	4ba4      	ldr	r3, [pc, #656]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001702:	6a1a      	ldr	r2, [r3, #32]
 8001704:	4ba3      	ldr	r3, [pc, #652]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001706:	2104      	movs	r1, #4
 8001708:	438a      	bics	r2, r1
 800170a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d014      	beq.n	800173e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001714:	f7ff fb34 	bl	8000d80 <HAL_GetTick>
 8001718:	0003      	movs	r3, r0
 800171a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	e009      	b.n	8001732 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff fb2f 	bl	8000d80 <HAL_GetTick>
 8001722:	0002      	movs	r2, r0
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	4a9b      	ldr	r2, [pc, #620]	; (8001998 <HAL_RCC_OscConfig+0x624>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e12b      	b.n	800198a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001732:	4b98      	ldr	r3, [pc, #608]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	2202      	movs	r2, #2
 8001738:	4013      	ands	r3, r2
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x3aa>
 800173c:	e013      	b.n	8001766 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff fb1f 	bl	8000d80 <HAL_GetTick>
 8001742:	0003      	movs	r3, r0
 8001744:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001746:	e009      	b.n	800175c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001748:	f7ff fb1a 	bl	8000d80 <HAL_GetTick>
 800174c:	0002      	movs	r2, r0
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	4a91      	ldr	r2, [pc, #580]	; (8001998 <HAL_RCC_OscConfig+0x624>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e116      	b.n	800198a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175c:	4b8d      	ldr	r3, [pc, #564]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	2202      	movs	r2, #2
 8001762:	4013      	ands	r3, r2
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001766:	231f      	movs	r3, #31
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d105      	bne.n	800177c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001770:	4b88      	ldr	r3, [pc, #544]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001772:	69da      	ldr	r2, [r3, #28]
 8001774:	4b87      	ldr	r3, [pc, #540]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001776:	4989      	ldr	r1, [pc, #548]	; (800199c <HAL_RCC_OscConfig+0x628>)
 8001778:	400a      	ands	r2, r1
 800177a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2210      	movs	r2, #16
 8001782:	4013      	ands	r3, r2
 8001784:	d063      	beq.n	800184e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d12a      	bne.n	80017e4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800178e:	4b81      	ldr	r3, [pc, #516]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001792:	4b80      	ldr	r3, [pc, #512]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001794:	2104      	movs	r1, #4
 8001796:	430a      	orrs	r2, r1
 8001798:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800179a:	4b7e      	ldr	r3, [pc, #504]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 800179c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800179e:	4b7d      	ldr	r3, [pc, #500]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80017a0:	2101      	movs	r1, #1
 80017a2:	430a      	orrs	r2, r1
 80017a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a6:	f7ff faeb 	bl	8000d80 <HAL_GetTick>
 80017aa:	0003      	movs	r3, r0
 80017ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017b0:	f7ff fae6 	bl	8000d80 <HAL_GetTick>
 80017b4:	0002      	movs	r2, r0
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e0e3      	b.n	800198a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017c2:	4b74      	ldr	r3, [pc, #464]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80017c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c6:	2202      	movs	r2, #2
 80017c8:	4013      	ands	r3, r2
 80017ca:	d0f1      	beq.n	80017b0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017cc:	4b71      	ldr	r3, [pc, #452]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80017ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d0:	22f8      	movs	r2, #248	; 0xf8
 80017d2:	4393      	bics	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	00da      	lsls	r2, r3, #3
 80017dc:	4b6d      	ldr	r3, [pc, #436]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80017de:	430a      	orrs	r2, r1
 80017e0:	635a      	str	r2, [r3, #52]	; 0x34
 80017e2:	e034      	b.n	800184e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	3305      	adds	r3, #5
 80017ea:	d111      	bne.n	8001810 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017ec:	4b69      	ldr	r3, [pc, #420]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80017ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f0:	4b68      	ldr	r3, [pc, #416]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80017f2:	2104      	movs	r1, #4
 80017f4:	438a      	bics	r2, r1
 80017f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017f8:	4b66      	ldr	r3, [pc, #408]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80017fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fc:	22f8      	movs	r2, #248	; 0xf8
 80017fe:	4393      	bics	r3, r2
 8001800:	0019      	movs	r1, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	00da      	lsls	r2, r3, #3
 8001808:	4b62      	ldr	r3, [pc, #392]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 800180a:	430a      	orrs	r2, r1
 800180c:	635a      	str	r2, [r3, #52]	; 0x34
 800180e:	e01e      	b.n	800184e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001810:	4b60      	ldr	r3, [pc, #384]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001814:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001816:	2104      	movs	r1, #4
 8001818:	430a      	orrs	r2, r1
 800181a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800181c:	4b5d      	ldr	r3, [pc, #372]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 800181e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001820:	4b5c      	ldr	r3, [pc, #368]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001822:	2101      	movs	r1, #1
 8001824:	438a      	bics	r2, r1
 8001826:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001828:	f7ff faaa 	bl	8000d80 <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001832:	f7ff faa5 	bl	8000d80 <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e0a2      	b.n	800198a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001848:	2202      	movs	r2, #2
 800184a:	4013      	ands	r3, r2
 800184c:	d1f1      	bne.n	8001832 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d100      	bne.n	8001858 <HAL_RCC_OscConfig+0x4e4>
 8001856:	e097      	b.n	8001988 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001858:	4b4e      	ldr	r3, [pc, #312]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	220c      	movs	r2, #12
 800185e:	4013      	ands	r3, r2
 8001860:	2b08      	cmp	r3, #8
 8001862:	d100      	bne.n	8001866 <HAL_RCC_OscConfig+0x4f2>
 8001864:	e06b      	b.n	800193e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d14c      	bne.n	8001908 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b49      	ldr	r3, [pc, #292]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b48      	ldr	r3, [pc, #288]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001874:	494a      	ldr	r1, [pc, #296]	; (80019a0 <HAL_RCC_OscConfig+0x62c>)
 8001876:	400a      	ands	r2, r1
 8001878:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff fa81 	bl	8000d80 <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff fa7c 	bl	8000d80 <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e079      	b.n	800198a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001896:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	049b      	lsls	r3, r3, #18
 800189e:	4013      	ands	r3, r2
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a2:	4b3c      	ldr	r3, [pc, #240]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	220f      	movs	r2, #15
 80018a8:	4393      	bics	r3, r2
 80018aa:	0019      	movs	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80018b2:	430a      	orrs	r2, r1
 80018b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4a3a      	ldr	r2, [pc, #232]	; (80019a4 <HAL_RCC_OscConfig+0x630>)
 80018bc:	4013      	ands	r3, r2
 80018be:	0019      	movs	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	431a      	orrs	r2, r3
 80018ca:	4b32      	ldr	r3, [pc, #200]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80018cc:	430a      	orrs	r2, r1
 80018ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d0:	4b30      	ldr	r3, [pc, #192]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80018d6:	2180      	movs	r1, #128	; 0x80
 80018d8:	0449      	lsls	r1, r1, #17
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fa4f 	bl	8000d80 <HAL_GetTick>
 80018e2:	0003      	movs	r3, r0
 80018e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fa4a 	bl	8000d80 <HAL_GetTick>
 80018ec:	0002      	movs	r2, r0
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e047      	b.n	800198a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	049b      	lsls	r3, r3, #18
 8001902:	4013      	ands	r3, r2
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x574>
 8001906:	e03f      	b.n	8001988 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 800190e:	4924      	ldr	r1, [pc, #144]	; (80019a0 <HAL_RCC_OscConfig+0x62c>)
 8001910:	400a      	ands	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff fa34 	bl	8000d80 <HAL_GetTick>
 8001918:	0003      	movs	r3, r0
 800191a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff fa2f 	bl	8000d80 <HAL_GetTick>
 8001922:	0002      	movs	r2, r0
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e02c      	b.n	800198a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001930:	4b18      	ldr	r3, [pc, #96]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	049b      	lsls	r3, r3, #18
 8001938:	4013      	ands	r3, r2
 800193a:	d1f0      	bne.n	800191e <HAL_RCC_OscConfig+0x5aa>
 800193c:	e024      	b.n	8001988 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e01f      	b.n	800198a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_RCC_OscConfig+0x620>)
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	025b      	lsls	r3, r3, #9
 800195c:	401a      	ands	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	429a      	cmp	r2, r3
 8001964:	d10e      	bne.n	8001984 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	220f      	movs	r2, #15
 800196a:	401a      	ands	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	23f0      	movs	r3, #240	; 0xf0
 8001978:	039b      	lsls	r3, r3, #14
 800197a:	401a      	ands	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	0018      	movs	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	b008      	add	sp, #32
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	40021000 	.word	0x40021000
 8001998:	00001388 	.word	0x00001388
 800199c:	efffffff 	.word	0xefffffff
 80019a0:	feffffff 	.word	0xfeffffff
 80019a4:	ffc2ffff 	.word	0xffc2ffff

080019a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0b3      	b.n	8001b24 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b5b      	ldr	r3, [pc, #364]	; (8001b2c <HAL_RCC_ClockConfig+0x184>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2201      	movs	r2, #1
 80019c2:	4013      	ands	r3, r2
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d911      	bls.n	80019ee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b58      	ldr	r3, [pc, #352]	; (8001b2c <HAL_RCC_ClockConfig+0x184>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2201      	movs	r2, #1
 80019d0:	4393      	bics	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	4b55      	ldr	r3, [pc, #340]	; (8001b2c <HAL_RCC_ClockConfig+0x184>)
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_ClockConfig+0x184>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2201      	movs	r2, #1
 80019e2:	4013      	ands	r3, r2
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e09a      	b.n	8001b24 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2202      	movs	r2, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	d015      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2204      	movs	r2, #4
 80019fe:	4013      	ands	r3, r2
 8001a00:	d006      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a02:	4b4b      	ldr	r3, [pc, #300]	; (8001b30 <HAL_RCC_ClockConfig+0x188>)
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	4b4a      	ldr	r3, [pc, #296]	; (8001b30 <HAL_RCC_ClockConfig+0x188>)
 8001a08:	21e0      	movs	r1, #224	; 0xe0
 8001a0a:	00c9      	lsls	r1, r1, #3
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a10:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_RCC_ClockConfig+0x188>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	22f0      	movs	r2, #240	; 0xf0
 8001a16:	4393      	bics	r3, r2
 8001a18:	0019      	movs	r1, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	4b44      	ldr	r3, [pc, #272]	; (8001b30 <HAL_RCC_ClockConfig+0x188>)
 8001a20:	430a      	orrs	r2, r1
 8001a22:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d040      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	4b3e      	ldr	r3, [pc, #248]	; (8001b30 <HAL_RCC_ClockConfig+0x188>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	029b      	lsls	r3, r3, #10
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d114      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e06e      	b.n	8001b24 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4e:	4b38      	ldr	r3, [pc, #224]	; (8001b30 <HAL_RCC_ClockConfig+0x188>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	049b      	lsls	r3, r3, #18
 8001a56:	4013      	ands	r3, r2
 8001a58:	d108      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e062      	b.n	8001b24 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5e:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <HAL_RCC_ClockConfig+0x188>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2202      	movs	r2, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e05b      	b.n	8001b24 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6c:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <HAL_RCC_ClockConfig+0x188>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2203      	movs	r2, #3
 8001a72:	4393      	bics	r3, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <HAL_RCC_ClockConfig+0x188>)
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a80:	f7ff f97e 	bl	8000d80 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a88:	e009      	b.n	8001a9e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8a:	f7ff f979 	bl	8000d80 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	4a27      	ldr	r2, [pc, #156]	; (8001b34 <HAL_RCC_ClockConfig+0x18c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e042      	b.n	8001b24 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_RCC_ClockConfig+0x188>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	401a      	ands	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d1ec      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <HAL_RCC_ClockConfig+0x184>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d211      	bcs.n	8001ae2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_RCC_ClockConfig+0x184>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4393      	bics	r3, r2
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_RCC_ClockConfig+0x184>)
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad0:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <HAL_RCC_ClockConfig+0x184>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d001      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e020      	b.n	8001b24 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d009      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_RCC_ClockConfig+0x188>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4a11      	ldr	r2, [pc, #68]	; (8001b38 <HAL_RCC_ClockConfig+0x190>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	0019      	movs	r1, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_RCC_ClockConfig+0x188>)
 8001afc:	430a      	orrs	r2, r1
 8001afe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b00:	f000 f820 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001b04:	0001      	movs	r1, r0
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_RCC_ClockConfig+0x188>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	4013      	ands	r3, r2
 8001b10:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <HAL_RCC_ClockConfig+0x194>)
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	000a      	movs	r2, r1
 8001b16:	40da      	lsrs	r2, r3
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x198>)
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f7ff f8e9 	bl	8000cf4 <HAL_InitTick>
  
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b004      	add	sp, #16
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40022000 	.word	0x40022000
 8001b30:	40021000 	.word	0x40021000
 8001b34:	00001388 	.word	0x00001388
 8001b38:	fffff8ff 	.word	0xfffff8ff
 8001b3c:	080036c8 	.word	0x080036c8
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	220c      	movs	r2, #12
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d002      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x30>
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d003      	beq.n	8001b7a <HAL_RCC_GetSysClockFreq+0x36>
 8001b72:	e02c      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b76:	613b      	str	r3, [r7, #16]
      break;
 8001b78:	e02c      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	0c9b      	lsrs	r3, r3, #18
 8001b7e:	220f      	movs	r2, #15
 8001b80:	4013      	ands	r3, r2
 8001b82:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b84:	5cd3      	ldrb	r3, [r2, r3]
 8001b86:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	4013      	ands	r3, r2
 8001b90:	4a16      	ldr	r2, [pc, #88]	; (8001bec <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b92:	5cd3      	ldrb	r3, [r2, r3]
 8001b94:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	025b      	lsls	r3, r3, #9
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d009      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	4810      	ldr	r0, [pc, #64]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ba4:	f7fe fab0 	bl	8000108 <__udivsi3>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	001a      	movs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4353      	muls	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	e009      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	000a      	movs	r2, r1
 8001bb8:	0152      	lsls	r2, r2, #5
 8001bba:	1a52      	subs	r2, r2, r1
 8001bbc:	0193      	lsls	r3, r2, #6
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	185b      	adds	r3, r3, r1
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	613b      	str	r3, [r7, #16]
      break;
 8001bcc:	e002      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bd0:	613b      	str	r3, [r7, #16]
      break;
 8001bd2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bd4:	693b      	ldr	r3, [r7, #16]
}
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b006      	add	sp, #24
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	40021000 	.word	0x40021000
 8001be4:	007a1200 	.word	0x007a1200
 8001be8:	080036e0 	.word	0x080036e0
 8001bec:	080036f0 	.word	0x080036f0

08001bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf4:	4b02      	ldr	r3, [pc, #8]	; (8001c00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c08:	f7ff fff2 	bl	8001bf0 <HAL_RCC_GetHCLKFreq>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	0a1b      	lsrs	r3, r3, #8
 8001c14:	2207      	movs	r2, #7
 8001c16:	4013      	ands	r3, r2
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
 8001c1c:	40d9      	lsrs	r1, r3
 8001c1e:	000b      	movs	r3, r1
}    
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	080036d8 	.word	0x080036d8

08001c30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e042      	b.n	8001cc8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	223d      	movs	r2, #61	; 0x3d
 8001c46:	5c9b      	ldrb	r3, [r3, r2]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d107      	bne.n	8001c5e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	223c      	movs	r2, #60	; 0x3c
 8001c52:	2100      	movs	r1, #0
 8001c54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7fe fec9 	bl	80009f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	223d      	movs	r2, #61	; 0x3d
 8001c62:	2102      	movs	r1, #2
 8001c64:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	0019      	movs	r1, r3
 8001c70:	0010      	movs	r0, r2
 8001c72:	f000 f9ed 	bl	8002050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2246      	movs	r2, #70	; 0x46
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	223e      	movs	r2, #62	; 0x3e
 8001c82:	2101      	movs	r1, #1
 8001c84:	5499      	strb	r1, [r3, r2]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	223f      	movs	r2, #63	; 0x3f
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	5499      	strb	r1, [r3, r2]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2240      	movs	r2, #64	; 0x40
 8001c92:	2101      	movs	r1, #1
 8001c94:	5499      	strb	r1, [r3, r2]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2241      	movs	r2, #65	; 0x41
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2242      	movs	r2, #66	; 0x42
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	5499      	strb	r1, [r3, r2]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2243      	movs	r2, #67	; 0x43
 8001caa:	2101      	movs	r1, #1
 8001cac:	5499      	strb	r1, [r3, r2]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2244      	movs	r2, #68	; 0x44
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	5499      	strb	r1, [r3, r2]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2245      	movs	r2, #69	; 0x45
 8001cba:	2101      	movs	r1, #1
 8001cbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	223d      	movs	r2, #61	; 0x3d
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b002      	add	sp, #8
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cda:	230f      	movs	r3, #15
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d108      	bne.n	8001cfa <HAL_TIM_PWM_Start_IT+0x2a>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	223e      	movs	r2, #62	; 0x3e
 8001cec:	5c9b      	ldrb	r3, [r3, r2]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	1e5a      	subs	r2, r3, #1
 8001cf4:	4193      	sbcs	r3, r2
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	e01f      	b.n	8001d3a <HAL_TIM_PWM_Start_IT+0x6a>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d108      	bne.n	8001d12 <HAL_TIM_PWM_Start_IT+0x42>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	223f      	movs	r2, #63	; 0x3f
 8001d04:	5c9b      	ldrb	r3, [r3, r2]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	1e5a      	subs	r2, r3, #1
 8001d0c:	4193      	sbcs	r3, r2
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	e013      	b.n	8001d3a <HAL_TIM_PWM_Start_IT+0x6a>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d108      	bne.n	8001d2a <HAL_TIM_PWM_Start_IT+0x5a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2240      	movs	r2, #64	; 0x40
 8001d1c:	5c9b      	ldrb	r3, [r3, r2]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	1e5a      	subs	r2, r3, #1
 8001d24:	4193      	sbcs	r3, r2
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	e007      	b.n	8001d3a <HAL_TIM_PWM_Start_IT+0x6a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2241      	movs	r2, #65	; 0x41
 8001d2e:	5c9b      	ldrb	r3, [r3, r2]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	3b01      	subs	r3, #1
 8001d34:	1e5a      	subs	r2, r3, #1
 8001d36:	4193      	sbcs	r3, r2
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0b1      	b.n	8001ea6 <HAL_TIM_PWM_Start_IT+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d104      	bne.n	8001d52 <HAL_TIM_PWM_Start_IT+0x82>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	223e      	movs	r2, #62	; 0x3e
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	5499      	strb	r1, [r3, r2]
 8001d50:	e013      	b.n	8001d7a <HAL_TIM_PWM_Start_IT+0xaa>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d104      	bne.n	8001d62 <HAL_TIM_PWM_Start_IT+0x92>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	223f      	movs	r2, #63	; 0x3f
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	5499      	strb	r1, [r3, r2]
 8001d60:	e00b      	b.n	8001d7a <HAL_TIM_PWM_Start_IT+0xaa>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d104      	bne.n	8001d72 <HAL_TIM_PWM_Start_IT+0xa2>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2240      	movs	r2, #64	; 0x40
 8001d6c:	2102      	movs	r1, #2
 8001d6e:	5499      	strb	r1, [r3, r2]
 8001d70:	e003      	b.n	8001d7a <HAL_TIM_PWM_Start_IT+0xaa>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2241      	movs	r2, #65	; 0x41
 8001d76:	2102      	movs	r1, #2
 8001d78:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b0c      	cmp	r3, #12
 8001d7e:	d02a      	beq.n	8001dd6 <HAL_TIM_PWM_Start_IT+0x106>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d830      	bhi.n	8001de8 <HAL_TIM_PWM_Start_IT+0x118>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d01b      	beq.n	8001dc4 <HAL_TIM_PWM_Start_IT+0xf4>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d82a      	bhi.n	8001de8 <HAL_TIM_PWM_Start_IT+0x118>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_TIM_PWM_Start_IT+0xd0>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d009      	beq.n	8001db2 <HAL_TIM_PWM_Start_IT+0xe2>
 8001d9e:	e023      	b.n	8001de8 <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2102      	movs	r1, #2
 8001dac:	430a      	orrs	r2, r1
 8001dae:	60da      	str	r2, [r3, #12]
      break;
 8001db0:	e01f      	b.n	8001df2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	60da      	str	r2, [r3, #12]
      break;
 8001dc2:	e016      	b.n	8001df2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2108      	movs	r1, #8
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	60da      	str	r2, [r3, #12]
      break;
 8001dd4:	e00d      	b.n	8001df2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2110      	movs	r1, #16
 8001de2:	430a      	orrs	r2, r1
 8001de4:	60da      	str	r2, [r3, #12]
      break;
 8001de6:	e004      	b.n	8001df2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8001de8:	230f      	movs	r3, #15
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
      break;
 8001df0:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001df2:	230f      	movs	r3, #15
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d151      	bne.n	8001ea0 <HAL_TIM_PWM_Start_IT+0x1d0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6839      	ldr	r1, [r7, #0]
 8001e02:	2201      	movs	r2, #1
 8001e04:	0018      	movs	r0, r3
 8001e06:	f000 fb95 	bl	8002534 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a28      	ldr	r2, [pc, #160]	; (8001eb0 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d00e      	beq.n	8001e32 <HAL_TIM_PWM_Start_IT+0x162>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a26      	ldr	r2, [pc, #152]	; (8001eb4 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d009      	beq.n	8001e32 <HAL_TIM_PWM_Start_IT+0x162>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a25      	ldr	r2, [pc, #148]	; (8001eb8 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d004      	beq.n	8001e32 <HAL_TIM_PWM_Start_IT+0x162>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a23      	ldr	r2, [pc, #140]	; (8001ebc <HAL_TIM_PWM_Start_IT+0x1ec>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d101      	bne.n	8001e36 <HAL_TIM_PWM_Start_IT+0x166>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_TIM_PWM_Start_IT+0x168>
 8001e36:	2300      	movs	r3, #0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	0209      	lsls	r1, r1, #8
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d009      	beq.n	8001e6c <HAL_TIM_PWM_Start_IT+0x19c>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a18      	ldr	r2, [pc, #96]	; (8001ec0 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d004      	beq.n	8001e6c <HAL_TIM_PWM_Start_IT+0x19c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a13      	ldr	r2, [pc, #76]	; (8001eb4 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d111      	bne.n	8001e90 <HAL_TIM_PWM_Start_IT+0x1c0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2207      	movs	r2, #7
 8001e74:	4013      	ands	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d010      	beq.n	8001ea0 <HAL_TIM_PWM_Start_IT+0x1d0>
      {
        __HAL_TIM_ENABLE(htim);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8e:	e007      	b.n	8001ea0 <HAL_TIM_PWM_Start_IT+0x1d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	781b      	ldrb	r3, [r3, #0]
}
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b004      	add	sp, #16
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	40012c00 	.word	0x40012c00
 8001eb4:	40014000 	.word	0x40014000
 8001eb8:	40014400 	.word	0x40014400
 8001ebc:	40014800 	.word	0x40014800
 8001ec0:	40000400 	.word	0x40000400

08001ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed0:	2317      	movs	r3, #23
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	223c      	movs	r2, #60	; 0x3c
 8001edc:	5c9b      	ldrb	r3, [r3, r2]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e0ad      	b.n	8002042 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	223c      	movs	r2, #60	; 0x3c
 8001eea:	2101      	movs	r1, #1
 8001eec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d100      	bne.n	8001ef6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001ef4:	e076      	b.n	8001fe4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	d900      	bls.n	8001efe <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001efc:	e095      	b.n	800202a <HAL_TIM_PWM_ConfigChannel+0x166>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d04e      	beq.n	8001fa2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d900      	bls.n	8001f0c <HAL_TIM_PWM_ConfigChannel+0x48>
 8001f0a:	e08e      	b.n	800202a <HAL_TIM_PWM_ConfigChannel+0x166>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_PWM_ConfigChannel+0x56>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d021      	beq.n	8001f5c <HAL_TIM_PWM_ConfigChannel+0x98>
 8001f18:	e087      	b.n	800202a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	0011      	movs	r1, r2
 8001f22:	0018      	movs	r0, r3
 8001f24:	f000 f90a 	bl	800213c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2108      	movs	r1, #8
 8001f34:	430a      	orrs	r2, r1
 8001f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2104      	movs	r1, #4
 8001f44:	438a      	bics	r2, r1
 8001f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6999      	ldr	r1, [r3, #24]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	619a      	str	r2, [r3, #24]
      break;
 8001f5a:	e06b      	b.n	8002034 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	0011      	movs	r1, r2
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 f971 	bl	800224c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699a      	ldr	r2, [r3, #24]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	0109      	lsls	r1, r1, #4
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4931      	ldr	r1, [pc, #196]	; (800204c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001f88:	400a      	ands	r2, r1
 8001f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6999      	ldr	r1, [r3, #24]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	021a      	lsls	r2, r3, #8
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	619a      	str	r2, [r3, #24]
      break;
 8001fa0:	e048      	b.n	8002034 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	0011      	movs	r1, r2
 8001faa:	0018      	movs	r0, r3
 8001fac:	f000 f9d2 	bl	8002354 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69da      	ldr	r2, [r3, #28]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2108      	movs	r1, #8
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69da      	ldr	r2, [r3, #28]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2104      	movs	r1, #4
 8001fcc:	438a      	bics	r2, r1
 8001fce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	69d9      	ldr	r1, [r3, #28]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	691a      	ldr	r2, [r3, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	61da      	str	r2, [r3, #28]
      break;
 8001fe2:	e027      	b.n	8002034 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	0011      	movs	r1, r2
 8001fec:	0018      	movs	r0, r3
 8001fee:	f000 fa37 	bl	8002460 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	69da      	ldr	r2, [r3, #28]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	0109      	lsls	r1, r1, #4
 8002000:	430a      	orrs	r2, r1
 8002002:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69da      	ldr	r2, [r3, #28]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	490f      	ldr	r1, [pc, #60]	; (800204c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002010:	400a      	ands	r2, r1
 8002012:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69d9      	ldr	r1, [r3, #28]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	021a      	lsls	r2, r3, #8
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	61da      	str	r2, [r3, #28]
      break;
 8002028:	e004      	b.n	8002034 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800202a:	2317      	movs	r3, #23
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
      break;
 8002032:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	223c      	movs	r2, #60	; 0x3c
 8002038:	2100      	movs	r1, #0
 800203a:	5499      	strb	r1, [r3, r2]

  return status;
 800203c:	2317      	movs	r3, #23
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	781b      	ldrb	r3, [r3, #0]
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b006      	add	sp, #24
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	fffffbff 	.word	0xfffffbff

08002050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <TIM_Base_SetConfig+0xd0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d003      	beq.n	8002070 <TIM_Base_SetConfig+0x20>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a2e      	ldr	r2, [pc, #184]	; (8002124 <TIM_Base_SetConfig+0xd4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d108      	bne.n	8002082 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2270      	movs	r2, #112	; 0x70
 8002074:	4393      	bics	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a26      	ldr	r2, [pc, #152]	; (8002120 <TIM_Base_SetConfig+0xd0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <TIM_Base_SetConfig+0x62>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a25      	ldr	r2, [pc, #148]	; (8002124 <TIM_Base_SetConfig+0xd4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00f      	beq.n	80020b2 <TIM_Base_SetConfig+0x62>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a24      	ldr	r2, [pc, #144]	; (8002128 <TIM_Base_SetConfig+0xd8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00b      	beq.n	80020b2 <TIM_Base_SetConfig+0x62>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a23      	ldr	r2, [pc, #140]	; (800212c <TIM_Base_SetConfig+0xdc>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <TIM_Base_SetConfig+0x62>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a22      	ldr	r2, [pc, #136]	; (8002130 <TIM_Base_SetConfig+0xe0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d003      	beq.n	80020b2 <TIM_Base_SetConfig+0x62>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a21      	ldr	r2, [pc, #132]	; (8002134 <TIM_Base_SetConfig+0xe4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d108      	bne.n	80020c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4a20      	ldr	r2, [pc, #128]	; (8002138 <TIM_Base_SetConfig+0xe8>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2280      	movs	r2, #128	; 0x80
 80020c8:	4393      	bics	r3, r2
 80020ca:	001a      	movs	r2, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <TIM_Base_SetConfig+0xd0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00b      	beq.n	800210a <TIM_Base_SetConfig+0xba>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <TIM_Base_SetConfig+0xdc>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d007      	beq.n	800210a <TIM_Base_SetConfig+0xba>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a0c      	ldr	r2, [pc, #48]	; (8002130 <TIM_Base_SetConfig+0xe0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d003      	beq.n	800210a <TIM_Base_SetConfig+0xba>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <TIM_Base_SetConfig+0xe4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d103      	bne.n	8002112 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	615a      	str	r2, [r3, #20]
}
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b004      	add	sp, #16
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40012c00 	.word	0x40012c00
 8002124:	40000400 	.word	0x40000400
 8002128:	40002000 	.word	0x40002000
 800212c:	40014000 	.word	0x40014000
 8002130:	40014400 	.word	0x40014400
 8002134:	40014800 	.word	0x40014800
 8002138:	fffffcff 	.word	0xfffffcff

0800213c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	2201      	movs	r2, #1
 800214c:	4393      	bics	r3, r2
 800214e:	001a      	movs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2270      	movs	r2, #112	; 0x70
 800216a:	4393      	bics	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2203      	movs	r2, #3
 8002172:	4393      	bics	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2202      	movs	r2, #2
 8002184:	4393      	bics	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a27      	ldr	r2, [pc, #156]	; (8002234 <TIM_OC1_SetConfig+0xf8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00b      	beq.n	80021b2 <TIM_OC1_SetConfig+0x76>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a26      	ldr	r2, [pc, #152]	; (8002238 <TIM_OC1_SetConfig+0xfc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <TIM_OC1_SetConfig+0x76>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a25      	ldr	r2, [pc, #148]	; (800223c <TIM_OC1_SetConfig+0x100>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d003      	beq.n	80021b2 <TIM_OC1_SetConfig+0x76>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a24      	ldr	r2, [pc, #144]	; (8002240 <TIM_OC1_SetConfig+0x104>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10c      	bne.n	80021cc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2208      	movs	r2, #8
 80021b6:	4393      	bics	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2204      	movs	r2, #4
 80021c8:	4393      	bics	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a19      	ldr	r2, [pc, #100]	; (8002234 <TIM_OC1_SetConfig+0xf8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d00b      	beq.n	80021ec <TIM_OC1_SetConfig+0xb0>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a18      	ldr	r2, [pc, #96]	; (8002238 <TIM_OC1_SetConfig+0xfc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d007      	beq.n	80021ec <TIM_OC1_SetConfig+0xb0>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a17      	ldr	r2, [pc, #92]	; (800223c <TIM_OC1_SetConfig+0x100>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d003      	beq.n	80021ec <TIM_OC1_SetConfig+0xb0>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a16      	ldr	r2, [pc, #88]	; (8002240 <TIM_OC1_SetConfig+0x104>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d111      	bne.n	8002210 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4a15      	ldr	r2, [pc, #84]	; (8002244 <TIM_OC1_SetConfig+0x108>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4a14      	ldr	r2, [pc, #80]	; (8002248 <TIM_OC1_SetConfig+0x10c>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	621a      	str	r2, [r3, #32]
}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	b006      	add	sp, #24
 8002230:	bd80      	pop	{r7, pc}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	40012c00 	.word	0x40012c00
 8002238:	40014000 	.word	0x40014000
 800223c:	40014400 	.word	0x40014400
 8002240:	40014800 	.word	0x40014800
 8002244:	fffffeff 	.word	0xfffffeff
 8002248:	fffffdff 	.word	0xfffffdff

0800224c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	2210      	movs	r2, #16
 800225c:	4393      	bics	r3, r2
 800225e:	001a      	movs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a2e      	ldr	r2, [pc, #184]	; (8002334 <TIM_OC2_SetConfig+0xe8>)
 800227a:	4013      	ands	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4a2d      	ldr	r2, [pc, #180]	; (8002338 <TIM_OC2_SetConfig+0xec>)
 8002282:	4013      	ands	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2220      	movs	r2, #32
 8002296:	4393      	bics	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a24      	ldr	r2, [pc, #144]	; (800233c <TIM_OC2_SetConfig+0xf0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d10d      	bne.n	80022ca <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2280      	movs	r2, #128	; 0x80
 80022b2:	4393      	bics	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2240      	movs	r2, #64	; 0x40
 80022c6:	4393      	bics	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a1b      	ldr	r2, [pc, #108]	; (800233c <TIM_OC2_SetConfig+0xf0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00b      	beq.n	80022ea <TIM_OC2_SetConfig+0x9e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a1a      	ldr	r2, [pc, #104]	; (8002340 <TIM_OC2_SetConfig+0xf4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <TIM_OC2_SetConfig+0x9e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a19      	ldr	r2, [pc, #100]	; (8002344 <TIM_OC2_SetConfig+0xf8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d003      	beq.n	80022ea <TIM_OC2_SetConfig+0x9e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a18      	ldr	r2, [pc, #96]	; (8002348 <TIM_OC2_SetConfig+0xfc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d113      	bne.n	8002312 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4a17      	ldr	r2, [pc, #92]	; (800234c <TIM_OC2_SetConfig+0x100>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4a16      	ldr	r2, [pc, #88]	; (8002350 <TIM_OC2_SetConfig+0x104>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	621a      	str	r2, [r3, #32]
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	b006      	add	sp, #24
 8002332:	bd80      	pop	{r7, pc}
 8002334:	ffff8fff 	.word	0xffff8fff
 8002338:	fffffcff 	.word	0xfffffcff
 800233c:	40012c00 	.word	0x40012c00
 8002340:	40014000 	.word	0x40014000
 8002344:	40014400 	.word	0x40014400
 8002348:	40014800 	.word	0x40014800
 800234c:	fffffbff 	.word	0xfffffbff
 8002350:	fffff7ff 	.word	0xfffff7ff

08002354 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a35      	ldr	r2, [pc, #212]	; (8002438 <TIM_OC3_SetConfig+0xe4>)
 8002364:	401a      	ands	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2270      	movs	r2, #112	; 0x70
 8002380:	4393      	bics	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2203      	movs	r2, #3
 8002388:	4393      	bics	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	4a28      	ldr	r2, [pc, #160]	; (800243c <TIM_OC3_SetConfig+0xe8>)
 800239a:	4013      	ands	r3, r2
 800239c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a24      	ldr	r2, [pc, #144]	; (8002440 <TIM_OC3_SetConfig+0xec>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10d      	bne.n	80023ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	4a23      	ldr	r2, [pc, #140]	; (8002444 <TIM_OC3_SetConfig+0xf0>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	4a1f      	ldr	r2, [pc, #124]	; (8002448 <TIM_OC3_SetConfig+0xf4>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1b      	ldr	r2, [pc, #108]	; (8002440 <TIM_OC3_SetConfig+0xec>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00b      	beq.n	80023ee <TIM_OC3_SetConfig+0x9a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1c      	ldr	r2, [pc, #112]	; (800244c <TIM_OC3_SetConfig+0xf8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <TIM_OC3_SetConfig+0x9a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1b      	ldr	r2, [pc, #108]	; (8002450 <TIM_OC3_SetConfig+0xfc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d003      	beq.n	80023ee <TIM_OC3_SetConfig+0x9a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <TIM_OC3_SetConfig+0x100>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d113      	bne.n	8002416 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4a19      	ldr	r2, [pc, #100]	; (8002458 <TIM_OC3_SetConfig+0x104>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4a18      	ldr	r2, [pc, #96]	; (800245c <TIM_OC3_SetConfig+0x108>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	621a      	str	r2, [r3, #32]
}
 8002430:	46c0      	nop			; (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b006      	add	sp, #24
 8002436:	bd80      	pop	{r7, pc}
 8002438:	fffffeff 	.word	0xfffffeff
 800243c:	fffffdff 	.word	0xfffffdff
 8002440:	40012c00 	.word	0x40012c00
 8002444:	fffff7ff 	.word	0xfffff7ff
 8002448:	fffffbff 	.word	0xfffffbff
 800244c:	40014000 	.word	0x40014000
 8002450:	40014400 	.word	0x40014400
 8002454:	40014800 	.word	0x40014800
 8002458:	ffffefff 	.word	0xffffefff
 800245c:	ffffdfff 	.word	0xffffdfff

08002460 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4a28      	ldr	r2, [pc, #160]	; (8002510 <TIM_OC4_SetConfig+0xb0>)
 8002470:	401a      	ands	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a22      	ldr	r2, [pc, #136]	; (8002514 <TIM_OC4_SetConfig+0xb4>)
 800248c:	4013      	ands	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4a21      	ldr	r2, [pc, #132]	; (8002518 <TIM_OC4_SetConfig+0xb8>)
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4a1d      	ldr	r2, [pc, #116]	; (800251c <TIM_OC4_SetConfig+0xbc>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	031b      	lsls	r3, r3, #12
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a19      	ldr	r2, [pc, #100]	; (8002520 <TIM_OC4_SetConfig+0xc0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00b      	beq.n	80024d8 <TIM_OC4_SetConfig+0x78>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a18      	ldr	r2, [pc, #96]	; (8002524 <TIM_OC4_SetConfig+0xc4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d007      	beq.n	80024d8 <TIM_OC4_SetConfig+0x78>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a17      	ldr	r2, [pc, #92]	; (8002528 <TIM_OC4_SetConfig+0xc8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d003      	beq.n	80024d8 <TIM_OC4_SetConfig+0x78>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a16      	ldr	r2, [pc, #88]	; (800252c <TIM_OC4_SetConfig+0xcc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d109      	bne.n	80024ec <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	4a15      	ldr	r2, [pc, #84]	; (8002530 <TIM_OC4_SetConfig+0xd0>)
 80024dc:	4013      	ands	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	019b      	lsls	r3, r3, #6
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	621a      	str	r2, [r3, #32]
}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b006      	add	sp, #24
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	ffffefff 	.word	0xffffefff
 8002514:	ffff8fff 	.word	0xffff8fff
 8002518:	fffffcff 	.word	0xfffffcff
 800251c:	ffffdfff 	.word	0xffffdfff
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40014000 	.word	0x40014000
 8002528:	40014400 	.word	0x40014400
 800252c:	40014800 	.word	0x40014800
 8002530:	ffffbfff 	.word	0xffffbfff

08002534 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	221f      	movs	r2, #31
 8002544:	4013      	ands	r3, r2
 8002546:	2201      	movs	r2, #1
 8002548:	409a      	lsls	r2, r3
 800254a:	0013      	movs	r3, r2
 800254c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	43d2      	mvns	r2, r2
 8002556:	401a      	ands	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a1a      	ldr	r2, [r3, #32]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	211f      	movs	r1, #31
 8002564:	400b      	ands	r3, r1
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4099      	lsls	r1, r3
 800256a:	000b      	movs	r3, r1
 800256c:	431a      	orrs	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	621a      	str	r2, [r3, #32]
}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	b006      	add	sp, #24
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	223c      	movs	r2, #60	; 0x3c
 800258a:	5c9b      	ldrb	r3, [r3, r2]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002590:	2302      	movs	r3, #2
 8002592:	e041      	b.n	8002618 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	223c      	movs	r2, #60	; 0x3c
 8002598:	2101      	movs	r1, #1
 800259a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	223d      	movs	r2, #61	; 0x3d
 80025a0:	2102      	movs	r1, #2
 80025a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2270      	movs	r2, #112	; 0x70
 80025b8:	4393      	bics	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a13      	ldr	r2, [pc, #76]	; (8002620 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d009      	beq.n	80025ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a11      	ldr	r2, [pc, #68]	; (8002624 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d004      	beq.n	80025ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a10      	ldr	r2, [pc, #64]	; (8002628 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d10c      	bne.n	8002606 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2280      	movs	r2, #128	; 0x80
 80025f0:	4393      	bics	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	223d      	movs	r2, #61	; 0x3d
 800260a:	2101      	movs	r1, #1
 800260c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	223c      	movs	r2, #60	; 0x3c
 8002612:	2100      	movs	r1, #0
 8002614:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b004      	add	sp, #16
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40012c00 	.word	0x40012c00
 8002624:	40000400 	.word	0x40000400
 8002628:	40014000 	.word	0x40014000

0800262c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	223c      	movs	r2, #60	; 0x3c
 800263e:	5c9b      	ldrb	r3, [r3, r2]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002644:	2302      	movs	r3, #2
 8002646:	e03e      	b.n	80026c6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	223c      	movs	r2, #60	; 0x3c
 800264c:	2101      	movs	r1, #1
 800264e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	22ff      	movs	r2, #255	; 0xff
 8002654:	4393      	bics	r3, r2
 8002656:	001a      	movs	r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002664:	401a      	ands	r2, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4a18      	ldr	r2, [pc, #96]	; (80026d4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002672:	401a      	ands	r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4a16      	ldr	r2, [pc, #88]	; (80026d8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002680:	401a      	ands	r2, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4a13      	ldr	r2, [pc, #76]	; (80026dc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800268e:	401a      	ands	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800269c:	401a      	ands	r2, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80026aa:	401a      	ands	r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	223c      	movs	r2, #60	; 0x3c
 80026c0:	2100      	movs	r1, #0
 80026c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	0018      	movs	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b004      	add	sp, #16
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	fffffcff 	.word	0xfffffcff
 80026d4:	fffffbff 	.word	0xfffffbff
 80026d8:	fffff7ff 	.word	0xfffff7ff
 80026dc:	ffffefff 	.word	0xffffefff
 80026e0:	ffffdfff 	.word	0xffffdfff
 80026e4:	ffffbfff 	.word	0xffffbfff

080026e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e044      	b.n	8002784 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d107      	bne.n	8002712 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2278      	movs	r2, #120	; 0x78
 8002706:	2100      	movs	r1, #0
 8002708:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	0018      	movs	r0, r3
 800270e:	f7fe fa35 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2224      	movs	r2, #36	; 0x24
 8002716:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2101      	movs	r1, #1
 8002724:	438a      	bics	r2, r1
 8002726:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	0018      	movs	r0, r3
 800272c:	f000 fbe8 	bl	8002f00 <UART_SetConfig>
 8002730:	0003      	movs	r3, r0
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e024      	b.n	8002784 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	0018      	movs	r0, r3
 8002746:	f000 fd1b 	bl	8003180 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	490d      	ldr	r1, [pc, #52]	; (800278c <HAL_UART_Init+0xa4>)
 8002756:	400a      	ands	r2, r1
 8002758:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2108      	movs	r1, #8
 8002766:	438a      	bics	r2, r1
 8002768:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2101      	movs	r1, #1
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	0018      	movs	r0, r3
 800277e:	f000 fdb3 	bl	80032e8 <UART_CheckIdleState>
 8002782:	0003      	movs	r3, r0
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b002      	add	sp, #8
 800278a:	bd80      	pop	{r7, pc}
 800278c:	fffff7ff 	.word	0xfffff7ff

08002790 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	1dbb      	adds	r3, r7, #6
 800279e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	589b      	ldr	r3, [r3, r2]
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	d000      	beq.n	80027ac <HAL_UART_Receive+0x1c>
 80027aa:	e0bd      	b.n	8002928 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_UART_Receive+0x2a>
 80027b2:	1dbb      	adds	r3, r7, #6
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0b5      	b.n	800292a <HAL_UART_Receive+0x19a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	015b      	lsls	r3, r3, #5
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d109      	bne.n	80027de <HAL_UART_Receive+0x4e>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d105      	bne.n	80027de <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2201      	movs	r2, #1
 80027d6:	4013      	ands	r3, r2
 80027d8:	d001      	beq.n	80027de <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e0a5      	b.n	800292a <HAL_UART_Receive+0x19a>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2284      	movs	r2, #132	; 0x84
 80027e2:	2100      	movs	r1, #0
 80027e4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2280      	movs	r2, #128	; 0x80
 80027ea:	2122      	movs	r1, #34	; 0x22
 80027ec:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027f4:	f7fe fac4 	bl	8000d80 <HAL_GetTick>
 80027f8:	0003      	movs	r3, r0
 80027fa:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1dba      	adds	r2, r7, #6
 8002800:	2158      	movs	r1, #88	; 0x58
 8002802:	8812      	ldrh	r2, [r2, #0]
 8002804:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1dba      	adds	r2, r7, #6
 800280a:	215a      	movs	r1, #90	; 0x5a
 800280c:	8812      	ldrh	r2, [r2, #0]
 800280e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	015b      	lsls	r3, r3, #5
 8002818:	429a      	cmp	r2, r3
 800281a:	d10d      	bne.n	8002838 <HAL_UART_Receive+0xa8>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d104      	bne.n	800282e <HAL_UART_Receive+0x9e>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	225c      	movs	r2, #92	; 0x5c
 8002828:	4942      	ldr	r1, [pc, #264]	; (8002934 <HAL_UART_Receive+0x1a4>)
 800282a:	5299      	strh	r1, [r3, r2]
 800282c:	e01a      	b.n	8002864 <HAL_UART_Receive+0xd4>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	225c      	movs	r2, #92	; 0x5c
 8002832:	21ff      	movs	r1, #255	; 0xff
 8002834:	5299      	strh	r1, [r3, r2]
 8002836:	e015      	b.n	8002864 <HAL_UART_Receive+0xd4>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10d      	bne.n	800285c <HAL_UART_Receive+0xcc>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d104      	bne.n	8002852 <HAL_UART_Receive+0xc2>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	225c      	movs	r2, #92	; 0x5c
 800284c:	21ff      	movs	r1, #255	; 0xff
 800284e:	5299      	strh	r1, [r3, r2]
 8002850:	e008      	b.n	8002864 <HAL_UART_Receive+0xd4>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	225c      	movs	r2, #92	; 0x5c
 8002856:	217f      	movs	r1, #127	; 0x7f
 8002858:	5299      	strh	r1, [r3, r2]
 800285a:	e003      	b.n	8002864 <HAL_UART_Receive+0xd4>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	225c      	movs	r2, #92	; 0x5c
 8002860:	2100      	movs	r1, #0
 8002862:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002864:	2312      	movs	r3, #18
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	215c      	movs	r1, #92	; 0x5c
 800286c:	5a52      	ldrh	r2, [r2, r1]
 800286e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	015b      	lsls	r3, r3, #5
 8002878:	429a      	cmp	r2, r3
 800287a:	d108      	bne.n	800288e <HAL_UART_Receive+0xfe>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d104      	bne.n	800288e <HAL_UART_Receive+0xfe>
    {
      pdata8bits  = NULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	e003      	b.n	8002896 <HAL_UART_Receive+0x106>
    }
    else
    {
      pdata8bits  = pData;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002896:	e03b      	b.n	8002910 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	0013      	movs	r3, r2
 80028a2:	2200      	movs	r2, #0
 80028a4:	2120      	movs	r1, #32
 80028a6:	f000 fdc7 	bl	8003438 <UART_WaitOnFlagUntilTimeout>
 80028aa:	1e03      	subs	r3, r0, #0
 80028ac:	d005      	beq.n	80028ba <HAL_UART_Receive+0x12a>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	2120      	movs	r1, #32
 80028b4:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e037      	b.n	800292a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10e      	bne.n	80028de <HAL_UART_Receive+0x14e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2212      	movs	r2, #18
 80028ca:	18ba      	adds	r2, r7, r2
 80028cc:	8812      	ldrh	r2, [r2, #0]
 80028ce:	4013      	ands	r3, r2
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	3302      	adds	r3, #2
 80028da:	61bb      	str	r3, [r7, #24]
 80028dc:	e00f      	b.n	80028fe <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2212      	movs	r2, #18
 80028ea:	18ba      	adds	r2, r7, r2
 80028ec:	8812      	ldrh	r2, [r2, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	4013      	ands	r3, r2
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	3301      	adds	r3, #1
 80028fc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	225a      	movs	r2, #90	; 0x5a
 8002902:	5a9b      	ldrh	r3, [r3, r2]
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b299      	uxth	r1, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	225a      	movs	r2, #90	; 0x5a
 800290e:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	225a      	movs	r2, #90	; 0x5a
 8002914:	5a9b      	ldrh	r3, [r3, r2]
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1bd      	bne.n	8002898 <HAL_UART_Receive+0x108>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	2120      	movs	r1, #32
 8002922:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	e000      	b.n	800292a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002928:	2302      	movs	r3, #2
  }
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b008      	add	sp, #32
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	000001ff 	.word	0x000001ff

08002938 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b0ab      	sub	sp, #172	; 0xac
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	22a4      	movs	r2, #164	; 0xa4
 8002948:	18b9      	adds	r1, r7, r2
 800294a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	20a0      	movs	r0, #160	; 0xa0
 8002954:	1839      	adds	r1, r7, r0
 8002956:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	219c      	movs	r1, #156	; 0x9c
 8002960:	1879      	adds	r1, r7, r1
 8002962:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002964:	0011      	movs	r1, r2
 8002966:	18bb      	adds	r3, r7, r2
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a99      	ldr	r2, [pc, #612]	; (8002bd0 <HAL_UART_IRQHandler+0x298>)
 800296c:	4013      	ands	r3, r2
 800296e:	2298      	movs	r2, #152	; 0x98
 8002970:	18bc      	adds	r4, r7, r2
 8002972:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002974:	18bb      	adds	r3, r7, r2
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d114      	bne.n	80029a6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800297c:	187b      	adds	r3, r7, r1
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2220      	movs	r2, #32
 8002982:	4013      	ands	r3, r2
 8002984:	d00f      	beq.n	80029a6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002986:	183b      	adds	r3, r7, r0
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2220      	movs	r2, #32
 800298c:	4013      	ands	r3, r2
 800298e:	d00a      	beq.n	80029a6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002994:	2b00      	cmp	r3, #0
 8002996:	d100      	bne.n	800299a <HAL_UART_IRQHandler+0x62>
 8002998:	e286      	b.n	8002ea8 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	0010      	movs	r0, r2
 80029a2:	4798      	blx	r3
      }
      return;
 80029a4:	e280      	b.n	8002ea8 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029a6:	2398      	movs	r3, #152	; 0x98
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d100      	bne.n	80029b2 <HAL_UART_IRQHandler+0x7a>
 80029b0:	e114      	b.n	8002bdc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029b2:	239c      	movs	r3, #156	; 0x9c
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2201      	movs	r2, #1
 80029ba:	4013      	ands	r3, r2
 80029bc:	d106      	bne.n	80029cc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029be:	23a0      	movs	r3, #160	; 0xa0
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a83      	ldr	r2, [pc, #524]	; (8002bd4 <HAL_UART_IRQHandler+0x29c>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	d100      	bne.n	80029cc <HAL_UART_IRQHandler+0x94>
 80029ca:	e107      	b.n	8002bdc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029cc:	23a4      	movs	r3, #164	; 0xa4
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2201      	movs	r2, #1
 80029d4:	4013      	ands	r3, r2
 80029d6:	d012      	beq.n	80029fe <HAL_UART_IRQHandler+0xc6>
 80029d8:	23a0      	movs	r3, #160	; 0xa0
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4013      	ands	r3, r2
 80029e4:	d00b      	beq.n	80029fe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2201      	movs	r2, #1
 80029ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2284      	movs	r2, #132	; 0x84
 80029f2:	589b      	ldr	r3, [r3, r2]
 80029f4:	2201      	movs	r2, #1
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2184      	movs	r1, #132	; 0x84
 80029fc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029fe:	23a4      	movs	r3, #164	; 0xa4
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2202      	movs	r2, #2
 8002a06:	4013      	ands	r3, r2
 8002a08:	d011      	beq.n	8002a2e <HAL_UART_IRQHandler+0xf6>
 8002a0a:	239c      	movs	r3, #156	; 0x9c
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2201      	movs	r2, #1
 8002a12:	4013      	ands	r3, r2
 8002a14:	d00b      	beq.n	8002a2e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2284      	movs	r2, #132	; 0x84
 8002a22:	589b      	ldr	r3, [r3, r2]
 8002a24:	2204      	movs	r2, #4
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2184      	movs	r1, #132	; 0x84
 8002a2c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a2e:	23a4      	movs	r3, #164	; 0xa4
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2204      	movs	r2, #4
 8002a36:	4013      	ands	r3, r2
 8002a38:	d011      	beq.n	8002a5e <HAL_UART_IRQHandler+0x126>
 8002a3a:	239c      	movs	r3, #156	; 0x9c
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2201      	movs	r2, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	d00b      	beq.n	8002a5e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2284      	movs	r2, #132	; 0x84
 8002a52:	589b      	ldr	r3, [r3, r2]
 8002a54:	2202      	movs	r2, #2
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2184      	movs	r1, #132	; 0x84
 8002a5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a5e:	23a4      	movs	r3, #164	; 0xa4
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2208      	movs	r2, #8
 8002a66:	4013      	ands	r3, r2
 8002a68:	d017      	beq.n	8002a9a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a6a:	23a0      	movs	r3, #160	; 0xa0
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2220      	movs	r2, #32
 8002a72:	4013      	ands	r3, r2
 8002a74:	d105      	bne.n	8002a82 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a76:	239c      	movs	r3, #156	; 0x9c
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a80:	d00b      	beq.n	8002a9a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2208      	movs	r2, #8
 8002a88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2284      	movs	r2, #132	; 0x84
 8002a8e:	589b      	ldr	r3, [r3, r2]
 8002a90:	2208      	movs	r2, #8
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2184      	movs	r1, #132	; 0x84
 8002a98:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a9a:	23a4      	movs	r3, #164	; 0xa4
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d013      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x198>
 8002aa8:	23a0      	movs	r3, #160	; 0xa0
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	04db      	lsls	r3, r3, #19
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d00c      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2284      	movs	r2, #132	; 0x84
 8002ac4:	589b      	ldr	r3, [r3, r2]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2184      	movs	r1, #132	; 0x84
 8002ace:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2284      	movs	r2, #132	; 0x84
 8002ad4:	589b      	ldr	r3, [r3, r2]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d100      	bne.n	8002adc <HAL_UART_IRQHandler+0x1a4>
 8002ada:	e1e7      	b.n	8002eac <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002adc:	23a4      	movs	r3, #164	; 0xa4
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d00e      	beq.n	8002b06 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ae8:	23a0      	movs	r3, #160	; 0xa0
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2220      	movs	r2, #32
 8002af0:	4013      	ands	r3, r2
 8002af2:	d008      	beq.n	8002b06 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d004      	beq.n	8002b06 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	0010      	movs	r0, r2
 8002b04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2284      	movs	r2, #132	; 0x84
 8002b0a:	589b      	ldr	r3, [r3, r2]
 8002b0c:	2194      	movs	r1, #148	; 0x94
 8002b0e:	187a      	adds	r2, r7, r1
 8002b10:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2240      	movs	r2, #64	; 0x40
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d004      	beq.n	8002b2a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b20:	187b      	adds	r3, r7, r1
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2228      	movs	r2, #40	; 0x28
 8002b26:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b28:	d047      	beq.n	8002bba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 fced 	bl	800350c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2240      	movs	r2, #64	; 0x40
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b40      	cmp	r3, #64	; 0x40
 8002b3e:	d137      	bne.n	8002bb0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b40:	f3ef 8310 	mrs	r3, PRIMASK
 8002b44:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b48:	2090      	movs	r0, #144	; 0x90
 8002b4a:	183a      	adds	r2, r7, r0
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	2301      	movs	r3, #1
 8002b50:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b54:	f383 8810 	msr	PRIMASK, r3
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2140      	movs	r1, #64	; 0x40
 8002b66:	438a      	bics	r2, r1
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	183b      	adds	r3, r7, r0
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b72:	f383 8810 	msr	PRIMASK, r3
}
 8002b76:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d012      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b84:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <HAL_UART_IRQHandler+0x2a0>)
 8002b86:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f7fe fa3b 	bl	8001008 <HAL_DMA_Abort_IT>
 8002b92:	1e03      	subs	r3, r0, #0
 8002b94:	d01a      	beq.n	8002bcc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba4:	e012      	b.n	8002bcc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 f995 	bl	8002ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bae:	e00d      	b.n	8002bcc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 f990 	bl	8002ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb8:	e008      	b.n	8002bcc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f000 f98b 	bl	8002ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2284      	movs	r2, #132	; 0x84
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002bca:	e16f      	b.n	8002eac <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	46c0      	nop			; (mov r8, r8)
    return;
 8002bce:	e16d      	b.n	8002eac <HAL_UART_IRQHandler+0x574>
 8002bd0:	0000080f 	.word	0x0000080f
 8002bd4:	04000120 	.word	0x04000120
 8002bd8:	080035d5 	.word	0x080035d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d000      	beq.n	8002be6 <HAL_UART_IRQHandler+0x2ae>
 8002be4:	e139      	b.n	8002e5a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002be6:	23a4      	movs	r3, #164	; 0xa4
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2210      	movs	r2, #16
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d100      	bne.n	8002bf4 <HAL_UART_IRQHandler+0x2bc>
 8002bf2:	e132      	b.n	8002e5a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bf4:	23a0      	movs	r3, #160	; 0xa0
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2210      	movs	r2, #16
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <HAL_UART_IRQHandler+0x2ca>
 8002c00:	e12b      	b.n	8002e5a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2210      	movs	r2, #16
 8002c08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2240      	movs	r2, #64	; 0x40
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	d000      	beq.n	8002c1a <HAL_UART_IRQHandler+0x2e2>
 8002c18:	e09f      	b.n	8002d5a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	217e      	movs	r1, #126	; 0x7e
 8002c24:	187b      	adds	r3, r7, r1
 8002c26:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002c28:	187b      	adds	r3, r7, r1
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d100      	bne.n	8002c32 <HAL_UART_IRQHandler+0x2fa>
 8002c30:	e13e      	b.n	8002eb0 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2258      	movs	r2, #88	; 0x58
 8002c36:	5a9b      	ldrh	r3, [r3, r2]
 8002c38:	187a      	adds	r2, r7, r1
 8002c3a:	8812      	ldrh	r2, [r2, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d300      	bcc.n	8002c42 <HAL_UART_IRQHandler+0x30a>
 8002c40:	e136      	b.n	8002eb0 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	187a      	adds	r2, r7, r1
 8002c46:	215a      	movs	r1, #90	; 0x5a
 8002c48:	8812      	ldrh	r2, [r2, #0]
 8002c4a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d06f      	beq.n	8002d36 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c56:	f3ef 8310 	mrs	r3, PRIMASK
 8002c5a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c60:	2301      	movs	r3, #1
 8002c62:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	f383 8810 	msr	PRIMASK, r3
}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4992      	ldr	r1, [pc, #584]	; (8002ec0 <HAL_UART_IRQHandler+0x588>)
 8002c78:	400a      	ands	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	f383 8810 	msr	PRIMASK, r3
}
 8002c86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c88:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c90:	677b      	str	r3, [r7, #116]	; 0x74
 8002c92:	2301      	movs	r3, #1
 8002c94:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c98:	f383 8810 	msr	PRIMASK, r3
}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2101      	movs	r1, #1
 8002caa:	438a      	bics	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb4:	f383 8810 	msr	PRIMASK, r3
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cba:	f3ef 8310 	mrs	r3, PRIMASK
 8002cbe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc2:	673b      	str	r3, [r7, #112]	; 0x70
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cca:	f383 8810 	msr	PRIMASK, r3
}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2140      	movs	r1, #64	; 0x40
 8002cdc:	438a      	bics	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ce2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce6:	f383 8810 	msr	PRIMASK, r3
}
 8002cea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	2120      	movs	r1, #32
 8002cf2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfe:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d04:	2301      	movs	r3, #1
 8002d06:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d0a:	f383 8810 	msr	PRIMASK, r3
}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2110      	movs	r1, #16
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d22:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d26:	f383 8810 	msr	PRIMASK, r3
}
 8002d2a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7fe f931 	bl	8000f98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2258      	movs	r2, #88	; 0x58
 8002d40:	5a9a      	ldrh	r2, [r3, r2]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	215a      	movs	r1, #90	; 0x5a
 8002d46:	5a5b      	ldrh	r3, [r3, r1]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	0011      	movs	r1, r2
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 f8c8 	bl	8002ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d58:	e0aa      	b.n	8002eb0 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2258      	movs	r2, #88	; 0x58
 8002d5e:	5a99      	ldrh	r1, [r3, r2]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	225a      	movs	r2, #90	; 0x5a
 8002d64:	5a9b      	ldrh	r3, [r3, r2]
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	208e      	movs	r0, #142	; 0x8e
 8002d6a:	183b      	adds	r3, r7, r0
 8002d6c:	1a8a      	subs	r2, r1, r2
 8002d6e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	225a      	movs	r2, #90	; 0x5a
 8002d74:	5a9b      	ldrh	r3, [r3, r2]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d100      	bne.n	8002d7e <HAL_UART_IRQHandler+0x446>
 8002d7c:	e09a      	b.n	8002eb4 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8002d7e:	183b      	adds	r3, r7, r0
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d100      	bne.n	8002d88 <HAL_UART_IRQHandler+0x450>
 8002d86:	e095      	b.n	8002eb4 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d88:	f3ef 8310 	mrs	r3, PRIMASK
 8002d8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d90:	2488      	movs	r4, #136	; 0x88
 8002d92:	193a      	adds	r2, r7, r4
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	2301      	movs	r3, #1
 8002d98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f383 8810 	msr	PRIMASK, r3
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4945      	ldr	r1, [pc, #276]	; (8002ec4 <HAL_UART_IRQHandler+0x58c>)
 8002dae:	400a      	ands	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	193b      	adds	r3, r7, r4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f383 8810 	msr	PRIMASK, r3
}
 8002dbe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dc6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc8:	2484      	movs	r4, #132	; 0x84
 8002dca:	193a      	adds	r2, r7, r4
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	2301      	movs	r3, #1
 8002dd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f383 8810 	msr	PRIMASK, r3
}
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2101      	movs	r1, #1
 8002de6:	438a      	bics	r2, r1
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	193b      	adds	r3, r7, r4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	f383 8810 	msr	PRIMASK, r3
}
 8002df6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2280      	movs	r2, #128	; 0x80
 8002dfc:	2120      	movs	r1, #32
 8002dfe:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e14:	2480      	movs	r4, #128	; 0x80
 8002e16:	193a      	adds	r2, r7, r4
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	f383 8810 	msr	PRIMASK, r3
}
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2110      	movs	r1, #16
 8002e32:	438a      	bics	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	193b      	adds	r3, r7, r4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3e:	f383 8810 	msr	PRIMASK, r3
}
 8002e42:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e4a:	183b      	adds	r3, r7, r0
 8002e4c:	881a      	ldrh	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0011      	movs	r1, r2
 8002e52:	0018      	movs	r0, r3
 8002e54:	f000 f848 	bl	8002ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e58:	e02c      	b.n	8002eb4 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e5a:	23a4      	movs	r3, #164	; 0xa4
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2280      	movs	r2, #128	; 0x80
 8002e62:	4013      	ands	r3, r2
 8002e64:	d00f      	beq.n	8002e86 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e66:	23a0      	movs	r3, #160	; 0xa0
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2280      	movs	r2, #128	; 0x80
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d009      	beq.n	8002e86 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01e      	beq.n	8002eb8 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	0010      	movs	r0, r2
 8002e82:	4798      	blx	r3
    }
    return;
 8002e84:	e018      	b.n	8002eb8 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e86:	23a4      	movs	r3, #164	; 0xa4
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2240      	movs	r2, #64	; 0x40
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d013      	beq.n	8002eba <HAL_UART_IRQHandler+0x582>
 8002e92:	23a0      	movs	r3, #160	; 0xa0
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2240      	movs	r2, #64	; 0x40
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d00d      	beq.n	8002eba <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f000 fbae 	bl	8003602 <UART_EndTransmit_IT>
    return;
 8002ea6:	e008      	b.n	8002eba <HAL_UART_IRQHandler+0x582>
      return;
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	e006      	b.n	8002eba <HAL_UART_IRQHandler+0x582>
    return;
 8002eac:	46c0      	nop			; (mov r8, r8)
 8002eae:	e004      	b.n	8002eba <HAL_UART_IRQHandler+0x582>
      return;
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	e002      	b.n	8002eba <HAL_UART_IRQHandler+0x582>
      return;
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	e000      	b.n	8002eba <HAL_UART_IRQHandler+0x582>
    return;
 8002eb8:	46c0      	nop			; (mov r8, r8)
  }

}
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b02b      	add	sp, #172	; 0xac
 8002ebe:	bd90      	pop	{r4, r7, pc}
 8002ec0:	fffffeff 	.word	0xfffffeff
 8002ec4:	fffffedf 	.word	0xfffffedf

08002ec8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	000a      	movs	r2, r1
 8002ef2:	1cbb      	adds	r3, r7, #2
 8002ef4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b002      	add	sp, #8
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f08:	231e      	movs	r3, #30
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a8d      	ldr	r2, [pc, #564]	; (8003164 <UART_SetConfig+0x264>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	0019      	movs	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4a88      	ldr	r2, [pc, #544]	; (8003168 <UART_SetConfig+0x268>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4a7f      	ldr	r2, [pc, #508]	; (800316c <UART_SetConfig+0x26c>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	0019      	movs	r1, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a7b      	ldr	r2, [pc, #492]	; (8003170 <UART_SetConfig+0x270>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d127      	bne.n	8002fd6 <UART_SetConfig+0xd6>
 8002f86:	4b7b      	ldr	r3, [pc, #492]	; (8003174 <UART_SetConfig+0x274>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d00d      	beq.n	8002fae <UART_SetConfig+0xae>
 8002f92:	d81b      	bhi.n	8002fcc <UART_SetConfig+0xcc>
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d014      	beq.n	8002fc2 <UART_SetConfig+0xc2>
 8002f98:	d818      	bhi.n	8002fcc <UART_SetConfig+0xcc>
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <UART_SetConfig+0xa4>
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d00a      	beq.n	8002fb8 <UART_SetConfig+0xb8>
 8002fa2:	e013      	b.n	8002fcc <UART_SetConfig+0xcc>
 8002fa4:	231f      	movs	r3, #31
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	e021      	b.n	8002ff2 <UART_SetConfig+0xf2>
 8002fae:	231f      	movs	r3, #31
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	701a      	strb	r2, [r3, #0]
 8002fb6:	e01c      	b.n	8002ff2 <UART_SetConfig+0xf2>
 8002fb8:	231f      	movs	r3, #31
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	701a      	strb	r2, [r3, #0]
 8002fc0:	e017      	b.n	8002ff2 <UART_SetConfig+0xf2>
 8002fc2:	231f      	movs	r3, #31
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	2208      	movs	r2, #8
 8002fc8:	701a      	strb	r2, [r3, #0]
 8002fca:	e012      	b.n	8002ff2 <UART_SetConfig+0xf2>
 8002fcc:	231f      	movs	r3, #31
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	e00d      	b.n	8002ff2 <UART_SetConfig+0xf2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a67      	ldr	r2, [pc, #412]	; (8003178 <UART_SetConfig+0x278>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d104      	bne.n	8002fea <UART_SetConfig+0xea>
 8002fe0:	231f      	movs	r3, #31
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	e003      	b.n	8002ff2 <UART_SetConfig+0xf2>
 8002fea:	231f      	movs	r3, #31
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	2210      	movs	r2, #16
 8002ff0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d15c      	bne.n	80030b8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002ffe:	231f      	movs	r3, #31
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b08      	cmp	r3, #8
 8003006:	d015      	beq.n	8003034 <UART_SetConfig+0x134>
 8003008:	dc18      	bgt.n	800303c <UART_SetConfig+0x13c>
 800300a:	2b04      	cmp	r3, #4
 800300c:	d00d      	beq.n	800302a <UART_SetConfig+0x12a>
 800300e:	dc15      	bgt.n	800303c <UART_SetConfig+0x13c>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <UART_SetConfig+0x11a>
 8003014:	2b02      	cmp	r3, #2
 8003016:	d005      	beq.n	8003024 <UART_SetConfig+0x124>
 8003018:	e010      	b.n	800303c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800301a:	f7fe fdf3 	bl	8001c04 <HAL_RCC_GetPCLK1Freq>
 800301e:	0003      	movs	r3, r0
 8003020:	61bb      	str	r3, [r7, #24]
        break;
 8003022:	e012      	b.n	800304a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003024:	4b55      	ldr	r3, [pc, #340]	; (800317c <UART_SetConfig+0x27c>)
 8003026:	61bb      	str	r3, [r7, #24]
        break;
 8003028:	e00f      	b.n	800304a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800302a:	f7fe fd8b 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 800302e:	0003      	movs	r3, r0
 8003030:	61bb      	str	r3, [r7, #24]
        break;
 8003032:	e00a      	b.n	800304a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	61bb      	str	r3, [r7, #24]
        break;
 800303a:	e006      	b.n	800304a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003040:	231e      	movs	r3, #30
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]
        break;
 8003048:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d100      	bne.n	8003052 <UART_SetConfig+0x152>
 8003050:	e07a      	b.n	8003148 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	005a      	lsls	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	085b      	lsrs	r3, r3, #1
 800305c:	18d2      	adds	r2, r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	0019      	movs	r1, r3
 8003064:	0010      	movs	r0, r2
 8003066:	f7fd f84f 	bl	8000108 <__udivsi3>
 800306a:	0003      	movs	r3, r0
 800306c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2b0f      	cmp	r3, #15
 8003072:	d91c      	bls.n	80030ae <UART_SetConfig+0x1ae>
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	025b      	lsls	r3, r3, #9
 800307a:	429a      	cmp	r2, r3
 800307c:	d217      	bcs.n	80030ae <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	b29a      	uxth	r2, r3
 8003082:	200e      	movs	r0, #14
 8003084:	183b      	adds	r3, r7, r0
 8003086:	210f      	movs	r1, #15
 8003088:	438a      	bics	r2, r1
 800308a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	085b      	lsrs	r3, r3, #1
 8003090:	b29b      	uxth	r3, r3
 8003092:	2207      	movs	r2, #7
 8003094:	4013      	ands	r3, r2
 8003096:	b299      	uxth	r1, r3
 8003098:	183b      	adds	r3, r7, r0
 800309a:	183a      	adds	r2, r7, r0
 800309c:	8812      	ldrh	r2, [r2, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	183a      	adds	r2, r7, r0
 80030a8:	8812      	ldrh	r2, [r2, #0]
 80030aa:	60da      	str	r2, [r3, #12]
 80030ac:	e04c      	b.n	8003148 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80030ae:	231e      	movs	r3, #30
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e047      	b.n	8003148 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030b8:	231f      	movs	r3, #31
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d015      	beq.n	80030ee <UART_SetConfig+0x1ee>
 80030c2:	dc18      	bgt.n	80030f6 <UART_SetConfig+0x1f6>
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d00d      	beq.n	80030e4 <UART_SetConfig+0x1e4>
 80030c8:	dc15      	bgt.n	80030f6 <UART_SetConfig+0x1f6>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <UART_SetConfig+0x1d4>
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d005      	beq.n	80030de <UART_SetConfig+0x1de>
 80030d2:	e010      	b.n	80030f6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030d4:	f7fe fd96 	bl	8001c04 <HAL_RCC_GetPCLK1Freq>
 80030d8:	0003      	movs	r3, r0
 80030da:	61bb      	str	r3, [r7, #24]
        break;
 80030dc:	e012      	b.n	8003104 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030de:	4b27      	ldr	r3, [pc, #156]	; (800317c <UART_SetConfig+0x27c>)
 80030e0:	61bb      	str	r3, [r7, #24]
        break;
 80030e2:	e00f      	b.n	8003104 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030e4:	f7fe fd2e 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 80030e8:	0003      	movs	r3, r0
 80030ea:	61bb      	str	r3, [r7, #24]
        break;
 80030ec:	e00a      	b.n	8003104 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	61bb      	str	r3, [r7, #24]
        break;
 80030f4:	e006      	b.n	8003104 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030fa:	231e      	movs	r3, #30
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	2201      	movs	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
        break;
 8003102:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01e      	beq.n	8003148 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	085a      	lsrs	r2, r3, #1
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	18d2      	adds	r2, r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	0019      	movs	r1, r3
 800311a:	0010      	movs	r0, r2
 800311c:	f7fc fff4 	bl	8000108 <__udivsi3>
 8003120:	0003      	movs	r3, r0
 8003122:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b0f      	cmp	r3, #15
 8003128:	d90a      	bls.n	8003140 <UART_SetConfig+0x240>
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	025b      	lsls	r3, r3, #9
 8003130:	429a      	cmp	r2, r3
 8003132:	d205      	bcs.n	8003140 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	b29a      	uxth	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	e003      	b.n	8003148 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003140:	231e      	movs	r3, #30
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003154:	231e      	movs	r3, #30
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	781b      	ldrb	r3, [r3, #0]
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b008      	add	sp, #32
 8003160:	bd80      	pop	{r7, pc}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	ffff69f3 	.word	0xffff69f3
 8003168:	ffffcfff 	.word	0xffffcfff
 800316c:	fffff4ff 	.word	0xfffff4ff
 8003170:	40013800 	.word	0x40013800
 8003174:	40021000 	.word	0x40021000
 8003178:	40004400 	.word	0x40004400
 800317c:	007a1200 	.word	0x007a1200

08003180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	2201      	movs	r2, #1
 800318e:	4013      	ands	r3, r2
 8003190:	d00b      	beq.n	80031aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a4a      	ldr	r2, [pc, #296]	; (80032c4 <UART_AdvFeatureConfig+0x144>)
 800319a:	4013      	ands	r3, r2
 800319c:	0019      	movs	r1, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	2202      	movs	r2, #2
 80031b0:	4013      	ands	r3, r2
 80031b2:	d00b      	beq.n	80031cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4a43      	ldr	r2, [pc, #268]	; (80032c8 <UART_AdvFeatureConfig+0x148>)
 80031bc:	4013      	ands	r3, r2
 80031be:	0019      	movs	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	2204      	movs	r2, #4
 80031d2:	4013      	ands	r3, r2
 80031d4:	d00b      	beq.n	80031ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4a3b      	ldr	r2, [pc, #236]	; (80032cc <UART_AdvFeatureConfig+0x14c>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2208      	movs	r2, #8
 80031f4:	4013      	ands	r3, r2
 80031f6:	d00b      	beq.n	8003210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a34      	ldr	r2, [pc, #208]	; (80032d0 <UART_AdvFeatureConfig+0x150>)
 8003200:	4013      	ands	r3, r2
 8003202:	0019      	movs	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	2210      	movs	r2, #16
 8003216:	4013      	ands	r3, r2
 8003218:	d00b      	beq.n	8003232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <UART_AdvFeatureConfig+0x154>)
 8003222:	4013      	ands	r3, r2
 8003224:	0019      	movs	r1, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	2220      	movs	r2, #32
 8003238:	4013      	ands	r3, r2
 800323a:	d00b      	beq.n	8003254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	4a25      	ldr	r2, [pc, #148]	; (80032d8 <UART_AdvFeatureConfig+0x158>)
 8003244:	4013      	ands	r3, r2
 8003246:	0019      	movs	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	2240      	movs	r2, #64	; 0x40
 800325a:	4013      	ands	r3, r2
 800325c:	d01d      	beq.n	800329a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <UART_AdvFeatureConfig+0x15c>)
 8003266:	4013      	ands	r3, r2
 8003268:	0019      	movs	r1, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	035b      	lsls	r3, r3, #13
 800327e:	429a      	cmp	r2, r3
 8003280:	d10b      	bne.n	800329a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <UART_AdvFeatureConfig+0x160>)
 800328a:	4013      	ands	r3, r2
 800328c:	0019      	movs	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	2280      	movs	r2, #128	; 0x80
 80032a0:	4013      	ands	r3, r2
 80032a2:	d00b      	beq.n	80032bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <UART_AdvFeatureConfig+0x164>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	605a      	str	r2, [r3, #4]
  }
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	b002      	add	sp, #8
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	fffdffff 	.word	0xfffdffff
 80032c8:	fffeffff 	.word	0xfffeffff
 80032cc:	fffbffff 	.word	0xfffbffff
 80032d0:	ffff7fff 	.word	0xffff7fff
 80032d4:	ffffefff 	.word	0xffffefff
 80032d8:	ffffdfff 	.word	0xffffdfff
 80032dc:	ffefffff 	.word	0xffefffff
 80032e0:	ff9fffff 	.word	0xff9fffff
 80032e4:	fff7ffff 	.word	0xfff7ffff

080032e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b092      	sub	sp, #72	; 0x48
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2284      	movs	r2, #132	; 0x84
 80032f4:	2100      	movs	r1, #0
 80032f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032f8:	f7fd fd42 	bl	8000d80 <HAL_GetTick>
 80032fc:	0003      	movs	r3, r0
 80032fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2208      	movs	r2, #8
 8003308:	4013      	ands	r3, r2
 800330a:	2b08      	cmp	r3, #8
 800330c:	d12c      	bne.n	8003368 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800330e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	0391      	lsls	r1, r2, #14
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4a46      	ldr	r2, [pc, #280]	; (8003430 <UART_CheckIdleState+0x148>)
 8003318:	9200      	str	r2, [sp, #0]
 800331a:	2200      	movs	r2, #0
 800331c:	f000 f88c 	bl	8003438 <UART_WaitOnFlagUntilTimeout>
 8003320:	1e03      	subs	r3, r0, #0
 8003322:	d021      	beq.n	8003368 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003324:	f3ef 8310 	mrs	r3, PRIMASK
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800332c:	63bb      	str	r3, [r7, #56]	; 0x38
 800332e:	2301      	movs	r3, #1
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	f383 8810 	msr	PRIMASK, r3
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	438a      	bics	r2, r1
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	f383 8810 	msr	PRIMASK, r3
}
 8003354:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2278      	movs	r2, #120	; 0x78
 8003360:	2100      	movs	r1, #0
 8003362:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e05f      	b.n	8003428 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2204      	movs	r2, #4
 8003370:	4013      	ands	r3, r2
 8003372:	2b04      	cmp	r3, #4
 8003374:	d146      	bne.n	8003404 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003378:	2280      	movs	r2, #128	; 0x80
 800337a:	03d1      	lsls	r1, r2, #15
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4a2c      	ldr	r2, [pc, #176]	; (8003430 <UART_CheckIdleState+0x148>)
 8003380:	9200      	str	r2, [sp, #0]
 8003382:	2200      	movs	r2, #0
 8003384:	f000 f858 	bl	8003438 <UART_WaitOnFlagUntilTimeout>
 8003388:	1e03      	subs	r3, r0, #0
 800338a:	d03b      	beq.n	8003404 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800338c:	f3ef 8310 	mrs	r3, PRIMASK
 8003390:	60fb      	str	r3, [r7, #12]
  return(result);
 8003392:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003394:	637b      	str	r3, [r7, #52]	; 0x34
 8003396:	2301      	movs	r3, #1
 8003398:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f383 8810 	msr	PRIMASK, r3
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4921      	ldr	r1, [pc, #132]	; (8003434 <UART_CheckIdleState+0x14c>)
 80033ae:	400a      	ands	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f383 8810 	msr	PRIMASK, r3
}
 80033bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033be:	f3ef 8310 	mrs	r3, PRIMASK
 80033c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80033c4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c6:	633b      	str	r3, [r7, #48]	; 0x30
 80033c8:	2301      	movs	r3, #1
 80033ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f383 8810 	msr	PRIMASK, r3
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2101      	movs	r1, #1
 80033e0:	438a      	bics	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	f383 8810 	msr	PRIMASK, r3
}
 80033ee:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	2120      	movs	r1, #32
 80033f6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2278      	movs	r2, #120	; 0x78
 80033fc:	2100      	movs	r1, #0
 80033fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e011      	b.n	8003428 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2280      	movs	r2, #128	; 0x80
 800340e:	2120      	movs	r1, #32
 8003410:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2278      	movs	r2, #120	; 0x78
 8003422:	2100      	movs	r1, #0
 8003424:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b010      	add	sp, #64	; 0x40
 800342e:	bd80      	pop	{r7, pc}
 8003430:	01ffffff 	.word	0x01ffffff
 8003434:	fffffedf 	.word	0xfffffedf

08003438 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	1dfb      	adds	r3, r7, #7
 8003446:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003448:	e04b      	b.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	3301      	adds	r3, #1
 800344e:	d048      	beq.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003450:	f7fd fc96 	bl	8000d80 <HAL_GetTick>
 8003454:	0002      	movs	r2, r0
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	429a      	cmp	r2, r3
 800345e:	d302      	bcc.n	8003466 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e04b      	b.n	8003502 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2204      	movs	r2, #4
 8003472:	4013      	ands	r3, r2
 8003474:	d035      	beq.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	2208      	movs	r2, #8
 800347e:	4013      	ands	r3, r2
 8003480:	2b08      	cmp	r3, #8
 8003482:	d111      	bne.n	80034a8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2208      	movs	r2, #8
 800348a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	0018      	movs	r0, r3
 8003490:	f000 f83c 	bl	800350c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2284      	movs	r2, #132	; 0x84
 8003498:	2108      	movs	r1, #8
 800349a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2278      	movs	r2, #120	; 0x78
 80034a0:	2100      	movs	r1, #0
 80034a2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e02c      	b.n	8003502 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	401a      	ands	r2, r3
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d112      	bne.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2280      	movs	r2, #128	; 0x80
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f000 f81f 	bl	800350c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2284      	movs	r2, #132	; 0x84
 80034d2:	2120      	movs	r1, #32
 80034d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2278      	movs	r2, #120	; 0x78
 80034da:	2100      	movs	r1, #0
 80034dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e00f      	b.n	8003502 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	4013      	ands	r3, r2
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	425a      	negs	r2, r3
 80034f2:	4153      	adcs	r3, r2
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	001a      	movs	r2, r3
 80034f8:	1dfb      	adds	r3, r7, #7
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d0a4      	beq.n	800344a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	0018      	movs	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	b004      	add	sp, #16
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08e      	sub	sp, #56	; 0x38
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003514:	f3ef 8310 	mrs	r3, PRIMASK
 8003518:	617b      	str	r3, [r7, #20]
  return(result);
 800351a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800351c:	637b      	str	r3, [r7, #52]	; 0x34
 800351e:	2301      	movs	r3, #1
 8003520:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f383 8810 	msr	PRIMASK, r3
}
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4926      	ldr	r1, [pc, #152]	; (80035d0 <UART_EndRxTransfer+0xc4>)
 8003536:	400a      	ands	r2, r1
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	f383 8810 	msr	PRIMASK, r3
}
 8003544:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003546:	f3ef 8310 	mrs	r3, PRIMASK
 800354a:	623b      	str	r3, [r7, #32]
  return(result);
 800354c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354e:	633b      	str	r3, [r7, #48]	; 0x30
 8003550:	2301      	movs	r3, #1
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	f383 8810 	msr	PRIMASK, r3
}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2101      	movs	r1, #1
 8003568:	438a      	bics	r2, r1
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	f383 8810 	msr	PRIMASK, r3
}
 8003576:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357c:	2b01      	cmp	r3, #1
 800357e:	d118      	bne.n	80035b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003580:	f3ef 8310 	mrs	r3, PRIMASK
 8003584:	60bb      	str	r3, [r7, #8]
  return(result);
 8003586:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800358a:	2301      	movs	r3, #1
 800358c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f383 8810 	msr	PRIMASK, r3
}
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2110      	movs	r1, #16
 80035a2:	438a      	bics	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f383 8810 	msr	PRIMASK, r3
}
 80035b0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2280      	movs	r2, #128	; 0x80
 80035b6:	2120      	movs	r1, #32
 80035b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b00e      	add	sp, #56	; 0x38
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	fffffedf 	.word	0xfffffedf

080035d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	225a      	movs	r2, #90	; 0x5a
 80035e6:	2100      	movs	r1, #0
 80035e8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2252      	movs	r2, #82	; 0x52
 80035ee:	2100      	movs	r1, #0
 80035f0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f7ff fc6f 	bl	8002ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b004      	add	sp, #16
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b086      	sub	sp, #24
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800360a:	f3ef 8310 	mrs	r3, PRIMASK
 800360e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003610:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	2301      	movs	r3, #1
 8003616:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f383 8810 	msr	PRIMASK, r3
}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2140      	movs	r1, #64	; 0x40
 800362c:	438a      	bics	r2, r1
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f383 8810 	msr	PRIMASK, r3
}
 800363a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	0018      	movs	r0, r3
 800364c:	f7ff fc3c 	bl	8002ec8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	46bd      	mov	sp, r7
 8003654:	b006      	add	sp, #24
 8003656:	bd80      	pop	{r7, pc}

08003658 <__libc_init_array>:
 8003658:	b570      	push	{r4, r5, r6, lr}
 800365a:	2600      	movs	r6, #0
 800365c:	4d0c      	ldr	r5, [pc, #48]	; (8003690 <__libc_init_array+0x38>)
 800365e:	4c0d      	ldr	r4, [pc, #52]	; (8003694 <__libc_init_array+0x3c>)
 8003660:	1b64      	subs	r4, r4, r5
 8003662:	10a4      	asrs	r4, r4, #2
 8003664:	42a6      	cmp	r6, r4
 8003666:	d109      	bne.n	800367c <__libc_init_array+0x24>
 8003668:	2600      	movs	r6, #0
 800366a:	f000 f821 	bl	80036b0 <_init>
 800366e:	4d0a      	ldr	r5, [pc, #40]	; (8003698 <__libc_init_array+0x40>)
 8003670:	4c0a      	ldr	r4, [pc, #40]	; (800369c <__libc_init_array+0x44>)
 8003672:	1b64      	subs	r4, r4, r5
 8003674:	10a4      	asrs	r4, r4, #2
 8003676:	42a6      	cmp	r6, r4
 8003678:	d105      	bne.n	8003686 <__libc_init_array+0x2e>
 800367a:	bd70      	pop	{r4, r5, r6, pc}
 800367c:	00b3      	lsls	r3, r6, #2
 800367e:	58eb      	ldr	r3, [r5, r3]
 8003680:	4798      	blx	r3
 8003682:	3601      	adds	r6, #1
 8003684:	e7ee      	b.n	8003664 <__libc_init_array+0xc>
 8003686:	00b3      	lsls	r3, r6, #2
 8003688:	58eb      	ldr	r3, [r5, r3]
 800368a:	4798      	blx	r3
 800368c:	3601      	adds	r6, #1
 800368e:	e7f2      	b.n	8003676 <__libc_init_array+0x1e>
 8003690:	08003700 	.word	0x08003700
 8003694:	08003700 	.word	0x08003700
 8003698:	08003700 	.word	0x08003700
 800369c:	08003704 	.word	0x08003704

080036a0 <memset>:
 80036a0:	0003      	movs	r3, r0
 80036a2:	1882      	adds	r2, r0, r2
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d100      	bne.n	80036aa <memset+0xa>
 80036a8:	4770      	bx	lr
 80036aa:	7019      	strb	r1, [r3, #0]
 80036ac:	3301      	adds	r3, #1
 80036ae:	e7f9      	b.n	80036a4 <memset+0x4>

080036b0 <_init>:
 80036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b6:	bc08      	pop	{r3}
 80036b8:	469e      	mov	lr, r3
 80036ba:	4770      	bx	lr

080036bc <_fini>:
 80036bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036c2:	bc08      	pop	{r3}
 80036c4:	469e      	mov	lr, r3
 80036c6:	4770      	bx	lr
